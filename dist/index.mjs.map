{"version":3,"sources":["../src/EntityRegistry.ts","../src/PolicyFetcher.ts","../src/PolicyDataFetcher.ts","../src/models/ModelBasic.ts","../src/models/Explorable.ts","../src/models/odrl/Policy.ts","../src/models/odrl/Asset.ts","../src/models/odrl/Rule.ts","../src/models/odrl/RulePermission.ts","../src/models/odrl/RuleProhibition.ts","../src/models/odrl/RuleDuty.ts","../src/models/odrl/Action.ts","../src/models/odrl/Operator.ts","../src/models/odrl/RightOperand.ts","../src/models/odrl/LeftOperand.ts","../src/models/odrl/Constraint.ts","../src/models/odrl/AtomicConstraint.ts","../src/models/odrl/LogicalConstraint.ts","../src/models/odrl/PolicyAgreement.ts","../src/models/odrl/PolicyOffer.ts","../src/models/odrl/PolicySet.ts","../src/utils.ts","../src/models/odrl/Party.ts","../src/PolicyInstanciator.ts","../src/PolicyEvaluator.ts","../src/index.ts"],"sourcesContent":["import { PolicyDataFetcher } from 'PolicyDataFetcher';\r\nimport { PolicyStateFetcher } from 'PolicyStateFetcher';\r\nimport { ModelBasic } from 'models/ModelBasic';\r\n\r\ninterface EntityReferences {\r\n  [key: string]: any;\r\n}\r\ninterface ParentRelations {\r\n  [key: string]: string;\r\n}\r\n\r\nexport class EntityRegistry {\r\n  private static parentRelations: ParentRelations = {};\r\n  private static entityReferences: EntityReferences = {};\r\n\r\n  public static getDataFetcherFromPolicy(\r\n    rootUID: string,\r\n  ): PolicyDataFetcher | undefined {\r\n    const root: ModelBasic = EntityRegistry.entityReferences[rootUID];\r\n    return root?._fetcherUID\r\n      ? EntityRegistry.entityReferences[root._fetcherUID]\r\n      : undefined;\r\n  }\r\n\r\n  public static getStateFetcherFromPolicy(\r\n    rootUID: string,\r\n  ): PolicyStateFetcher | undefined {\r\n    const root: ModelBasic = EntityRegistry.entityReferences[rootUID];\r\n    return root?._stateFetcherUID\r\n      ? EntityRegistry.entityReferences[root._stateFetcherUID]\r\n      : undefined;\r\n  }\r\n\r\n  public static getEntity(uid: string): any | undefined {\r\n    return EntityRegistry.entityReferences[uid];\r\n  }\r\n\r\n  public static addReference(model: any): void {\r\n    EntityRegistry.entityReferences[model._objectUID] = model;\r\n  }\r\n\r\n  public static cleanReferences(): void {\r\n    EntityRegistry.parentRelations = {};\r\n    EntityRegistry.entityReferences = {};\r\n  }\r\n\r\n  public static setParent(child: ModelBasic, parent: ModelBasic): void {\r\n    EntityRegistry.parentRelations[child._objectUID] = parent._objectUID;\r\n  }\r\n\r\n  public static getParent(child: ModelBasic): ModelBasic {\r\n    const uid = EntityRegistry.parentRelations[child._objectUID];\r\n    return EntityRegistry.entityReferences[uid];\r\n  }\r\n}\r\n","import { EntityRegistry } from 'EntityRegistry';\r\nimport { randomUUID } from 'node:crypto';\r\n\r\nexport const Custom = (): MethodDecorator => {\r\n  return (\r\n    target: any,\r\n    key: string | symbol,\r\n    descriptor: PropertyDescriptor,\r\n  ) => {\r\n    if (descriptor && typeof descriptor.value === 'function') {\r\n      target.customMethods = target.customMethods || [];\r\n      target.customMethods.push(key);\r\n    }\r\n  };\r\n};\r\n\r\ninterface ContextFunctions {\r\n  [key: string]: Function;\r\n}\r\n\r\nexport abstract class PolicyFetcher {\r\n  private bypass: string[] = [];\r\n  protected _context: ContextFunctions = {};\r\n  public _objectUID: string;\r\n  protected options: any = {};\r\n\r\n  constructor() {\r\n    this._objectUID = randomUUID();\r\n    EntityRegistry.addReference(this);\r\n    const prototype = Object.getPrototypeOf(this);\r\n    const customs = prototype.customMethods || [];\r\n    customs.forEach((method: string) => {\r\n      const propertyName = method.replace(/^get/, '');\r\n      const lowercasePropertyName =\r\n        propertyName.charAt(0).toLowerCase() + propertyName.slice(1);\r\n      this._context[lowercasePropertyName as keyof PolicyFetcher] = (\r\n        this[method as keyof PolicyFetcher] as Function\r\n      ).bind(this);\r\n    });\r\n  }\r\n\r\n  public setRequestOptions(options: any) {\r\n    this.options = options;\r\n  }\r\n\r\n  public hasBypassFor(name: string) {\r\n    return this.bypass.includes(name);\r\n  }\r\n\r\n  public setBypassFor(name: string) {\r\n    return this.bypass.push(name);\r\n  }\r\n\r\n  abstract get context(): ContextFunctions;\r\n}\r\n","import { PolicyFetcher } from 'PolicyFetcher';\r\n\r\nexport const Custom = (): MethodDecorator => {\r\n  return (\r\n    target: any,\r\n    key: string | symbol,\r\n    descriptor: PropertyDescriptor,\r\n  ) => {\r\n    if (descriptor && typeof descriptor.value === 'function') {\r\n      target.customMethods = target.customMethods || [];\r\n      target.customMethods.push(key);\r\n    }\r\n  };\r\n};\r\n\r\ninterface LeftOperandFunctions {\r\n  absolutePosition: () => Promise<number>;\r\n  absoluteSize: () => Promise<number>;\r\n  absoluteSpatialPosition: () => Promise<[number, number]>;\r\n  absoluteTemporalPosition: () => Promise<Date>;\r\n  count: () => Promise<number>;\r\n  dateTime: () => Promise<Date>;\r\n  delayPeriod: () => Promise<number>;\r\n  deliveryChannel: () => Promise<string>;\r\n  device: () => Promise<string>;\r\n  elapsedTime: () => Promise<number>;\r\n  event: () => Promise<string>;\r\n  fileFormat: () => Promise<string>;\r\n  industry: () => Promise<string>;\r\n  language: () => Promise<string>;\r\n  media: () => Promise<string>;\r\n  meteredTime: () => Promise<number>;\r\n  payAmount: () => Promise<number>;\r\n  percentage: () => Promise<number>;\r\n  product: () => Promise<string>;\r\n  purpose: () => Promise<string>;\r\n  recipient: () => Promise<string>;\r\n  relativePosition: () => Promise<number>;\r\n  relativeSize: () => Promise<number>;\r\n  relativeSpatialPosition: () => Promise<[number, number]>;\r\n  relativeTemporalPosition: () => Promise<Date>;\r\n  resolution: () => Promise<number>;\r\n  spatial: () => Promise<string>;\r\n  spatialCoordinates: () => Promise<[number, number]>;\r\n  system: () => Promise<string>;\r\n  systemDevice: () => Promise<string>;\r\n  timeInterval: () => Promise<[Date, Date]>;\r\n  unitOfCount: () => Promise<string>;\r\n  version: () => Promise<string>;\r\n  virtualLocation: () => Promise<string>;\r\n  [key: string]: Function;\r\n}\r\n\r\nexport abstract class PolicyDataFetcher extends PolicyFetcher {\r\n  private types: { [key: string]: string[] } = {\r\n    date: [\r\n      'dateTime',\r\n      'absoluteTemporalPosition',\r\n      'relativeTemporalPosition',\r\n      'timeInterval',\r\n      'elapsedTime',\r\n    ],\r\n    // boolean: [''],\r\n  };\r\n\r\n  constructor() {\r\n    super();\r\n    this._context = {\r\n      absolutePosition: this.getAbsolutePosition.bind(this),\r\n      absoluteSize: this.getAbsoluteSize.bind(this),\r\n      absoluteSpatialPosition: this.getAbsoluteSpatialPosition.bind(this),\r\n      absoluteTemporalPosition: this.getAbsoluteTemporalPosition.bind(this),\r\n      count: this.getCount.bind(this),\r\n      dateTime: this.getDateTime.bind(this),\r\n      delayPeriod: this.getDelayPeriod.bind(this),\r\n      deliveryChannel: this.getDeliveryChannel.bind(this),\r\n      device: this.getDevice.bind(this),\r\n      elapsedTime: this.getElapsedTime.bind(this),\r\n      event: this.getEvent.bind(this),\r\n      fileFormat: this.getFileFormat.bind(this),\r\n      industry: this.getIndustry.bind(this),\r\n      language: this.getLanguage.bind(this),\r\n      media: this.getMedia.bind(this),\r\n      meteredTime: this.getMeteredTime.bind(this),\r\n      payAmount: this.getPayAmount.bind(this),\r\n      percentage: this.getPercentage.bind(this),\r\n      product: this.getProduct.bind(this),\r\n      purpose: this.getPurpose.bind(this),\r\n      recipient: this.getRecipient.bind(this),\r\n      relativePosition: this.getRelativePosition.bind(this),\r\n      relativeSize: this.getRelativeSize.bind(this),\r\n      relativeSpatialPosition: this.getRelativeSpatialPosition.bind(this),\r\n      relativeTemporalPosition: this.getRelativeTemporalPosition.bind(this),\r\n      resolution: this.getResolution.bind(this),\r\n      spatial: this.getSpatial.bind(this),\r\n      spatialCoordinates: this.getSpatialCoordinates.bind(this),\r\n      system: this.getSystem.bind(this),\r\n      systemDevice: this.getSystemDevice.bind(this),\r\n      timeInterval: this.getTimeInterval.bind(this),\r\n      unitOfCount: this.getUnitOfCount.bind(this),\r\n      version: this.getVersion.bind(this),\r\n      virtualLocation: this.getVirtualLocation.bind(this),\r\n      ...this._context,\r\n    };\r\n  }\r\n\r\n  public getTypes(leftOperand: string): string[] {\r\n    return Object.entries(this.types)\r\n      .flatMap(([key, values]) => (values.includes(leftOperand) ? key : []))\r\n      .filter(Boolean);\r\n  }\r\n\r\n  public get context(): LeftOperandFunctions {\r\n    return this._context as LeftOperandFunctions;\r\n  }\r\n\r\n  protected async getAbsolutePosition(): Promise<number> {\r\n    return 0;\r\n  }\r\n\r\n  protected async getAbsoluteSize(): Promise<number> {\r\n    return 0;\r\n  }\r\n\r\n  protected async getAbsoluteSpatialPosition(): Promise<[number, number]> {\r\n    return [0, 0];\r\n  }\r\n\r\n  protected async getAbsoluteTemporalPosition(): Promise<Date> {\r\n    return new Date();\r\n  }\r\n\r\n  protected async getCount(): Promise<number> {\r\n    return 0;\r\n  }\r\n\r\n  protected async getDateTime(): Promise<Date> {\r\n    return new Date();\r\n  }\r\n\r\n  protected async getDelayPeriod(): Promise<number> {\r\n    return 0;\r\n  }\r\n\r\n  protected async getDeliveryChannel(): Promise<string> {\r\n    return '';\r\n  }\r\n\r\n  protected async getDevice(): Promise<string> {\r\n    return '';\r\n  }\r\n\r\n  protected async getElapsedTime(): Promise<number> {\r\n    return 0;\r\n  }\r\n\r\n  protected async getEvent(): Promise<string> {\r\n    return '';\r\n  }\r\n\r\n  protected async getFileFormat(): Promise<string> {\r\n    return '';\r\n  }\r\n\r\n  protected async getIndustry(): Promise<string> {\r\n    return '';\r\n  }\r\n\r\n  protected async getLanguage(): Promise<string> {\r\n    return 'en';\r\n  }\r\n\r\n  protected async getMedia(): Promise<string> {\r\n    return '';\r\n  }\r\n\r\n  protected async getMeteredTime(): Promise<number> {\r\n    return 0;\r\n  }\r\n\r\n  protected async getPayAmount(): Promise<number> {\r\n    return 0;\r\n  }\r\n\r\n  protected async getPercentage(): Promise<number> {\r\n    return 0;\r\n  }\r\n\r\n  protected async getProduct(): Promise<string> {\r\n    return '';\r\n  }\r\n\r\n  protected async getPurpose(): Promise<string> {\r\n    return '';\r\n  }\r\n\r\n  protected async getRecipient(): Promise<string> {\r\n    return '';\r\n  }\r\n\r\n  protected async getRelativePosition(): Promise<number> {\r\n    return 0;\r\n  }\r\n\r\n  protected async getRelativeSize(): Promise<number> {\r\n    return 0;\r\n  }\r\n\r\n  protected async getRelativeSpatialPosition(): Promise<[number, number]> {\r\n    return [0, 0];\r\n  }\r\n\r\n  protected async getRelativeTemporalPosition(): Promise<Date> {\r\n    return new Date();\r\n  }\r\n\r\n  protected async getResolution(): Promise<number> {\r\n    return 0;\r\n  }\r\n\r\n  protected async getSpatial(): Promise<string> {\r\n    return '';\r\n  }\r\n\r\n  protected async getSpatialCoordinates(): Promise<[number, number]> {\r\n    return [0, 0];\r\n  }\r\n\r\n  protected async getSystem(): Promise<string> {\r\n    return '';\r\n  }\r\n\r\n  protected async getSystemDevice(): Promise<string> {\r\n    return '';\r\n  }\r\n\r\n  protected async getTimeInterval(): Promise<[Date, Date]> {\r\n    const now = new Date();\r\n    return [now, now];\r\n  }\r\n\r\n  protected async getUnitOfCount(): Promise<string> {\r\n    return '';\r\n  }\r\n\r\n  protected async getVersion(): Promise<string> {\r\n    return '';\r\n  }\r\n\r\n  protected async getVirtualLocation(): Promise<string> {\r\n    return '';\r\n  }\r\n}\r\n","import { EntityRegistry } from 'EntityRegistry';\r\nimport { randomUUID } from 'node:crypto';\r\n\r\nexport const HandleFailure = (): MethodDecorator => {\r\n  return (\r\n    target: any,\r\n    key: string | symbol,\r\n    descriptor: PropertyDescriptor,\r\n  ) => {\r\n    if (descriptor && typeof descriptor.value === 'function') {\r\n      const originalMethod = descriptor.value;\r\n      descriptor.value = async function (...args: any[]) {\r\n        const result = await originalMethod.apply(this, args);\r\n        if ((this as any).handleFailure && !result) {\r\n          (this as any).handleFailure();\r\n        }\r\n        return result;\r\n      };\r\n    }\r\n    return descriptor;\r\n  };\r\n};\r\n\r\nexport abstract class ModelBasic {\r\n  public _rootUID?: string;\r\n  public _objectUID: string;\r\n  public _fetcherUID?: string;\r\n  public _stateFetcherUID?: string;\r\n  public _instanceOf?: string;\r\n  public _namespace?: string | string[];\r\n  constructor() {\r\n    this._objectUID = randomUUID();\r\n    EntityRegistry.addReference(this);\r\n  }\r\n\r\n  protected handleFailure() {\r\n    // Todo: Handle Failure\r\n    console.log('handleFailure');\r\n  }\r\n\r\n  public setParent(parent: ModelBasic): void {\r\n    EntityRegistry.setParent(this, parent);\r\n  }\r\n\r\n  public getParent(): ModelBasic {\r\n    return EntityRegistry.getParent(this);\r\n  }\r\n\r\n  protected abstract verify(): Promise<boolean>;\r\n  //\r\n  protected validate(depth: number = 0, promises: Promise<boolean>[]): void {\r\n    promises.push(\r\n      (async (): Promise<boolean> => {\r\n        try {\r\n          promises.push(this.verify());\r\n          for (const prop in this) {\r\n            if (this.hasOwnProperty(prop)) {\r\n              const value = (this as any)[prop];\r\n              if (Array.isArray(value)) {\r\n                for (const item of value) {\r\n                  if (\r\n                    item instanceof ModelBasic &&\r\n                    typeof item.validate === 'function'\r\n                  ) {\r\n                    item.validate(depth + 2, promises);\r\n                  } else if (\r\n                    ((typeof item === 'string' ||\r\n                      typeof item === 'boolean' ||\r\n                      item instanceof Date ||\r\n                      typeof item === 'number') &&\r\n                      this._instanceOf === 'RightOperand') ||\r\n                    prop === '@context' ||\r\n                    prop === '_namespace'\r\n                  ) {\r\n                    //\r\n                  } else {\r\n                    throw new Error(\r\n                      `Invalid entry: ${JSON.stringify(item, null, 2)}`,\r\n                    );\r\n                  }\r\n                }\r\n              } else if (\r\n                value instanceof ModelBasic &&\r\n                typeof value.validate === 'function'\r\n              ) {\r\n                value.validate(depth + 1, promises);\r\n              } else {\r\n                if (typeof value === 'object' && value !== null) {\r\n                  throw new Error(\r\n                    `Invalid entry: ${JSON.stringify(value, null, 2)}`,\r\n                  );\r\n                }\r\n              }\r\n            }\r\n          }\r\n          return true;\r\n        } catch (error: any) {\r\n          console.error(`[ModelBasic] - \\x1b[31m${error.message}\\x1b[37m`);\r\n          return false;\r\n        }\r\n      })(),\r\n    );\r\n  }\r\n  //\r\n  public debug(depth: number = 0): void {\r\n    const indentation = '  '.repeat(depth);\r\n    console.log(\r\n      `\\x1b[93m${indentation}Class ${this.constructor.name}:\\x1b[37m`,\r\n    );\r\n\r\n    for (const prop in this) {\r\n      if (this.hasOwnProperty(prop)) {\r\n        const value = (this as any)[prop];\r\n\r\n        if (Array.isArray(value)) {\r\n          console.log(`${indentation}  ${prop}: \\x1b[36m[\\x1b[37m`);\r\n          for (const item of value) {\r\n            if (\r\n              item instanceof ModelBasic &&\r\n              typeof item.debug === 'function'\r\n            ) {\r\n              item.debug(depth + 2);\r\n            } else if (\r\n              ((typeof item === 'string' ||\r\n                typeof item === 'boolean' ||\r\n                item instanceof Date ||\r\n                typeof item === 'number') &&\r\n                this._instanceOf === 'RightOperand') ||\r\n              prop === '@context' ||\r\n              prop === '_namespace'\r\n            ) {\r\n              console.log(\r\n                `${indentation}    \\x1b[90m${JSON.stringify(\r\n                  item,\r\n                  null,\r\n                  2,\r\n                ).replace(/\\n/gm, `\\n${indentation}    `)}\\x1b[37m`,\r\n              );\r\n            } else {\r\n              console.log(\r\n                `\\x1b[31m${indentation}    ${JSON.stringify(item)}\\x1b[37m`,\r\n              );\r\n            }\r\n          }\r\n          console.log(`${indentation}  \\x1b[36m]\\x1b[37m`);\r\n        } else if (\r\n          value instanceof ModelBasic &&\r\n          typeof value.debug === 'function'\r\n        ) {\r\n          value.debug(depth + 1);\r\n        } else {\r\n          if (typeof value === 'object' && value !== null) {\r\n            console.log(\r\n              `\\x1b[31m${indentation}  -${prop}: ${JSON.stringify(\r\n                value,\r\n              )}\\x1b[37m`,\r\n            );\r\n          } else {\r\n            if (\r\n              prop !== '_objectUID' &&\r\n              prop !== '_rootUID' &&\r\n              prop !== '_instanceOf'\r\n            ) {\r\n              console.log(\r\n                `${indentation}  \\x1b[32m-\\x1b[37m${prop}: \\x1b[90m${value}\\x1b[37m`,\r\n              );\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n","import { ModelBasic } from './ModelBasic';\r\n\r\nexport abstract class Explorable extends ModelBasic {\r\n  protected abstract evaluate(): Promise<boolean>;\r\n\r\n  protected explore(\r\n    pick: Function,\r\n    depth: number = 0,\r\n    entities: Explorable[],\r\n    options?: any,\r\n  ): void {\r\n    if (pick(this, options)) {\r\n      entities.push(this);\r\n    }\r\n    for (const prop in this) {\r\n      if (this.hasOwnProperty(prop)) {\r\n        const value = (this as any)[prop];\r\n        if (Array.isArray(value)) {\r\n          for (const item of value) {\r\n            if (\r\n              item instanceof Explorable &&\r\n              typeof item.explore === 'function'\r\n            ) {\r\n              item.explore(pick, depth + 2, entities, options);\r\n            }\r\n          }\r\n        } else if (\r\n          value instanceof Explorable &&\r\n          typeof value.explore === 'function'\r\n        ) {\r\n          value.explore(pick, depth + 1, entities, options);\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n","import { Explorable } from '../Explorable';\r\nimport { ConflictTerm } from './ConflictTerm';\r\nimport { RuleDuty } from './RuleDuty';\r\nimport { RulePermission } from './RulePermission';\r\nimport { RuleProhibition } from './RuleProhibition';\r\n\r\nexport type PolicyContext = string | { [key: string]: string }[];\r\nexport abstract class Policy extends Explorable {\r\n  protected '@context': PolicyContext = '';\r\n  protected '@type': string;\r\n  protected uid: string;\r\n  protected permission: RulePermission[];\r\n  protected prohibition: RuleProhibition[];\r\n  protected obligation: RuleDuty[];\r\n  protected profile?: string[];\r\n  protected inheritFrom?: string[];\r\n  protected conflict?: ConflictTerm[];\r\n\r\n  constructor(uid: string, context: PolicyContext, type: string) {\r\n    super();\r\n    this.uid = uid;\r\n    this['@context'] = context;\r\n    this['@type'] = type;\r\n    this.permission = [];\r\n    this.prohibition = [];\r\n    this.obligation = [];\r\n  }\r\n\r\n  public get permissions(): RulePermission[] {\r\n    return this.permission;\r\n  }\r\n\r\n  public get prohibitions(): RuleProhibition[] {\r\n    return this.prohibition;\r\n  }\r\n\r\n  public get obligations(): RulePermission[] {\r\n    return this.permission;\r\n  }\r\n\r\n  public addPermission(permission: RulePermission): void {\r\n    this.permission.push(permission);\r\n  }\r\n\r\n  public addProhibition(prohibition: RuleProhibition): void {\r\n    this.prohibition.push(prohibition);\r\n  }\r\n\r\n  public addDuty(prohibition: RuleDuty): void {\r\n    this.obligation.push(prohibition);\r\n  }\r\n\r\n  public async validate(): Promise<boolean> {\r\n    const promises: Promise<boolean>[] = [];\r\n    super.validate(0, promises);\r\n    return Promise.all(promises).then((results) =>\r\n      results.every((result) => result),\r\n    );\r\n  }\r\n\r\n  public async explore(picker: Function, options?: any): Promise<Explorable[]> {\r\n    const explorables: Explorable[] = [];\r\n    super.explore(picker, 0, explorables, options);\r\n    return explorables;\r\n  }\r\n}\r\n","import { Explorable } from 'models/Explorable';\r\nimport { AssetCollection } from './AssetCollection';\r\n\r\nexport class Asset extends Explorable {\r\n  uid?: string;\r\n  partOf?: AssetCollection[];\r\n  hasPolicy?: string;\r\n\r\n  constructor(\r\n    target:\r\n      | string\r\n      | { uid?: string; partOf?: AssetCollection[]; hasPolicy?: string },\r\n  ) {\r\n    super();\r\n    if (typeof target === 'string') {\r\n      this.uid = target;\r\n    } else {\r\n      this.uid = target.uid;\r\n      this.partOf = target.partOf;\r\n      this.hasPolicy = target.hasPolicy;\r\n    }\r\n  }\r\n  protected async evaluate(): Promise<boolean> {\r\n    return true;\r\n  }\r\n  public async verify(): Promise<boolean> {\r\n    return true;\r\n  }\r\n}\r\n","import { Explorable } from '../Explorable';\r\nimport { Action } from './Action';\r\nimport { Asset } from './Asset';\r\nimport { Constraint } from './Constraint';\r\nimport { Party } from './Party';\r\nimport { Relation } from './Relation';\r\n\r\nexport abstract class Rule extends Explorable {\r\n  action?: Action | Action[];\r\n  target?: Asset;\r\n  // Legal or moral entity that has established the obligation / author of the policy.\r\n  assigner?: Party;\r\n  // Individual or entity recipient of the obligation, required to comply with the policy.\r\n  assignee?: Party;\r\n  asset?: Asset;\r\n  function?: Party[];\r\n  failure?: Rule[];\r\n  protected constraint?: Constraint[];\r\n  uid?: string;\r\n  relation?: Relation;\r\n\r\n  constructor(uid?: string) {\r\n    super();\r\n    if (uid) {\r\n      this.uid = uid;\r\n    }\r\n  }\r\n\r\n  public get constraints(): Constraint[] {\r\n    if (this.constraint === undefined) {\r\n      this.constraint = [];\r\n    }\r\n    return this.constraint;\r\n  }\r\n\r\n  public setTarget(asset: Asset): void {\r\n    this.target = asset;\r\n  }\r\n\r\n  public setAction(action: Action): void {\r\n    this.action = action;\r\n  }\r\n\r\n  public addAction(action: Action): void {\r\n    if (this.action === undefined) {\r\n      this.action = [];\r\n    }\r\n    (this.action as Array<Action>).push(action);\r\n  }\r\n\r\n  public addConstraint(constraint: Constraint) {\r\n    this.constraints.push(constraint);\r\n  }\r\n\r\n  public getTarget(): Asset | undefined {\r\n    return this.target;\r\n  }\r\n\r\n  public getAction(): Action | undefined | Action[] {\r\n    return this.action;\r\n  }\r\n\r\n  public getConstraints(): Constraint[] {\r\n    return this.constraints;\r\n  }\r\n}\r\n","import { Rule } from './Rule';\r\nimport { RuleDuty } from './RuleDuty';\r\n\r\nexport class RulePermission extends Rule {\r\n  duty?: RuleDuty[];\r\n  constructor() {\r\n    super();\r\n  }\r\n\r\n  public addDuty(duty: RuleDuty) {\r\n    if (this.duty === undefined) {\r\n      this.duty = [];\r\n    }\r\n    this.duty.push(duty);\r\n  }\r\n\r\n  public async evaluate(): Promise<boolean> {\r\n    const result = await Promise.all([\r\n      this.evaluateConstraints(),\r\n      this.evaluateDuties(),\r\n    ]);\r\n    return result.every(Boolean);\r\n  }\r\n\r\n  private async evaluateDuties(): Promise<boolean> {\r\n    try {\r\n      if (this.duty) {\r\n        const all = await Promise.all(this.duty.map((duty) => duty.evaluate()));\r\n        return all.every(Boolean);\r\n      }\r\n      return true;\r\n    } catch (error) {\r\n      console.error('Error while evaluating rule:', error);\r\n    }\r\n    return false;\r\n  }\r\n\r\n  private async evaluateConstraints(): Promise<boolean> {\r\n    try {\r\n      if (this.constraints) {\r\n        const all = await Promise.all(\r\n          this.constraints.map((constraint) => constraint.evaluate()),\r\n        );\r\n        return all.every(Boolean);\r\n      }\r\n    } catch (error) {\r\n      console.error('Error while evaluating rule:', error);\r\n    }\r\n    return false;\r\n  }\r\n\r\n  public async verify(): Promise<boolean> {\r\n    return true;\r\n  }\r\n}\r\n","import { HandleFailure } from 'models/ModelBasic';\r\nimport { Rule } from './Rule';\r\nimport { RuleDuty } from './RuleDuty';\r\n\r\nexport class RuleProhibition extends Rule {\r\n  remedy?: RuleDuty[];\r\n  constructor() {\r\n    super();\r\n  }\r\n\r\n  public addRemedy(duty: RuleDuty) {\r\n    if (this.remedy === undefined) {\r\n      this.remedy = [];\r\n    }\r\n    this.remedy.push(duty);\r\n  }\r\n\r\n  public async evaluate(): Promise<boolean> {\r\n    const result = await Promise.all([\r\n      this.evaluateConstraints(),\r\n      this.evaluateRemedies(),\r\n    ]);\r\n    return result.every(Boolean);\r\n  }\r\n\r\n  private async evaluateRemedies(): Promise<boolean> {\r\n    try {\r\n      if (this.remedy) {\r\n        const all = await Promise.all(\r\n          this.remedy.map((remedy) => remedy.evaluate()),\r\n        );\r\n        return all.every(Boolean);\r\n      }\r\n      return true;\r\n    } catch (error) {\r\n      console.error('Error while evaluating rule:', error);\r\n    }\r\n    return false;\r\n  }\r\n\r\n  // Todo: @HandleFailure()\r\n  private async evaluateConstraints(): Promise<boolean> {\r\n    try {\r\n      if (this.constraints) {\r\n        const all = await Promise.all(\r\n          this.constraints.map((constraint) => constraint.evaluate()),\r\n        );\r\n        if (all.length) {\r\n          return all.every((value) => value === false);\r\n        }\r\n        return false;\r\n      }\r\n    } catch (error) {\r\n      console.error('Error while evaluating rule:', error);\r\n    }\r\n    return false;\r\n  }\r\n\r\n  public async verify(): Promise<boolean> {\r\n    return true;\r\n  }\r\n}\r\n","import { Action } from './Action';\r\nimport { Party } from './Party';\r\nimport { Rule } from './Rule';\r\n\r\nexport class RuleDuty extends Rule {\r\n  public _type?: 'consequence' | 'remedy' | 'obligation' | 'duty';\r\n  private consequence?: RuleDuty[];\r\n  public compensatedParty?: string;\r\n  public compensatingParty?: string;\r\n  private status?: 'notInfringed' | 'infringed';\r\n  constructor(assigner?: Party, assignee?: Party) {\r\n    super();\r\n    if (assigner) {\r\n      this.assigner = assigner;\r\n    }\r\n    if (assignee) {\r\n      this.assignee = assignee;\r\n    }\r\n  }\r\n\r\n  public async evaluate(): Promise<boolean> {\r\n    const result = await Promise.all([\r\n      this.evaluateConstraints(),\r\n      this.evaluateActions(),\r\n    ]);\r\n    return result.every(Boolean);\r\n  }\r\n\r\n  private async evaluateActions(): Promise<boolean> {\r\n    if (Array.isArray(this.action)) {\r\n      const processes = await Promise.all(\r\n        this.action.map((action: Action) => action.refine()),\r\n      );\r\n      return processes.every(Boolean);\r\n    } else if (this.action instanceof Action) {\r\n      return this.action.evaluate();\r\n    }\r\n    return false;\r\n  }\r\n\r\n  private async evaluateConstraints(): Promise<boolean> {\r\n    try {\r\n      if (this.constraints) {\r\n        const all = await Promise.all(\r\n          this.constraints.map((constraint) => constraint.evaluate()),\r\n        );\r\n        return all.every(Boolean);\r\n      }\r\n    } catch (error) {\r\n      console.error('Error while evaluating rule:', error);\r\n    }\r\n    return false;\r\n  }\r\n\r\n  public async verify(): Promise<boolean> {\r\n    return true;\r\n  }\r\n\r\n  public addConsequence(consequence: RuleDuty) {\r\n    if (this.consequence === undefined) {\r\n      this.consequence = [];\r\n    }\r\n    this.consequence.push(consequence);\r\n  }\r\n}\r\n","import { EntityRegistry } from 'EntityRegistry';\r\nimport { ModelBasic } from '../ModelBasic';\r\nimport { Constraint } from './Constraint';\r\nimport { RuleDuty } from './RuleDuty';\r\n\r\nexport const actions = [\r\n  'Attribution',\r\n  'CommericalUse',\r\n  'DerivativeWorks',\r\n  'Distribution',\r\n  'Notice',\r\n  'Reproduction',\r\n  'ShareAlike',\r\n  'Sharing',\r\n  'SourceCode',\r\n  'acceptTracking',\r\n  'adHocShare',\r\n  'aggregate',\r\n  'annotate',\r\n  'anonymize',\r\n  'append',\r\n  'appendTo',\r\n  'archive',\r\n  'attachPolicy',\r\n  'attachSource',\r\n  'attribute',\r\n  'commercialize',\r\n  'compensate',\r\n  'concurrentUse',\r\n  'copy',\r\n  'delete',\r\n  'derive',\r\n  'digitize',\r\n  'display',\r\n  'distribute',\r\n  'ensureExclusivity',\r\n  'execute',\r\n  'export',\r\n  'extract',\r\n  'extractChar',\r\n  'extractPage',\r\n  'extractWord',\r\n  'give',\r\n  'grantUse',\r\n  'include',\r\n  'index',\r\n  'inform',\r\n  'install',\r\n  'lease',\r\n  'lend',\r\n  'license',\r\n  'modify',\r\n  'move',\r\n  'nextPolicy',\r\n  'obtainConsent',\r\n  'pay',\r\n  'play',\r\n  'present',\r\n  'preview',\r\n  'print',\r\n  'read',\r\n  'reproduce',\r\n  'reviewPolicy',\r\n  'secondaryUse',\r\n  'sell',\r\n  'share',\r\n  'shareAlike',\r\n  'stream',\r\n  'synchronize',\r\n  'textToSpeech',\r\n  'transfer',\r\n  'transform',\r\n  'translate',\r\n  'uninstall',\r\n  'use',\r\n  'watermark',\r\n  'write',\r\n  'writeTo',\r\n] as const;\r\n\r\nexport type ActionType = (typeof actions)[number];\r\n\r\ntype InclusionMap = Map<string, Set<string>>;\r\n\r\nexport class Action extends ModelBasic {\r\n  private static inclusions: InclusionMap = new Map();\r\n\r\n  value: string;\r\n  refinement?: Constraint[];\r\n  includedIn: Action | null;\r\n  implies?: Action[];\r\n\r\n  constructor(value: string, includedIn: Action | null) {\r\n    super();\r\n    this.value = value;\r\n    this.includedIn = includedIn;\r\n\r\n    Action.includeIn(value, [this.value]);\r\n  }\r\n\r\n  public static includeIn(current: string, values: string[]) {\r\n    let inclusions: Set<string> | undefined = Action.inclusions.get(current);\r\n    if (!inclusions) {\r\n      inclusions = new Set<string>();\r\n      Action.inclusions.set(current, inclusions);\r\n    }\r\n    for (let value of values) {\r\n      inclusions.add(value);\r\n    }\r\n  }\r\n\r\n  public addConstraint(constraint: Constraint) {\r\n    if (this.refinement === undefined) {\r\n      this.refinement = [];\r\n    }\r\n    this.refinement.push(constraint);\r\n  }\r\n\r\n  public async includes(value: string): Promise<boolean> {\r\n    return Action.inclusions.get(this.value)?.has(value) || false;\r\n  }\r\n\r\n  public static async getIncluded(values: ActionType[]): Promise<ActionType[]> {\r\n    const foundValues: ActionType[] = [];\r\n    values.forEach((value: ActionType) => {\r\n      const includedValues = Action.inclusions.get(value);\r\n      includedValues &&\r\n        foundValues.push(...(Array.from(includedValues) as ActionType[]));\r\n    });\r\n    return Array.from(new Set(foundValues));\r\n  }\r\n\r\n  public async evaluate(): Promise<boolean> {\r\n    const refine = this.refine();\r\n    const rule = this.getParent();\r\n    if (rule instanceof RuleDuty) {\r\n      const all = await Promise.all([\r\n        refine,\r\n        (async (): Promise<boolean> => {\r\n          try {\r\n            const fetcher = this._rootUID\r\n              ? EntityRegistry.getStateFetcherFromPolicy(this._rootUID)\r\n              : undefined;\r\n            if (fetcher) {\r\n              return fetcher.context[this.value]();\r\n            } else {\r\n              console.warn(\r\n                `\\x1b[93m/!\\\\No state fetcher found, can't evaluate \"${this.value}\" action\\x1b[37m`,\r\n              );\r\n            }\r\n          } catch (error: any) {\r\n            console.error(`No state found for \"${this.value}\" action`);\r\n          }\r\n          return false;\r\n        })(),\r\n      ]);\r\n      return all.every(Boolean);\r\n    }\r\n    return refine;\r\n  }\r\n\r\n  public async refine(): Promise<boolean> {\r\n    try {\r\n      if (this.refinement) {\r\n        const all = await Promise.all(\r\n          this.refinement.map((constraint) => constraint.evaluate()),\r\n        );\r\n        return all.every(Boolean);\r\n      }\r\n    } catch (error) {\r\n      console.error('Error while refining action:', error);\r\n    }\r\n    return true;\r\n  }\r\n\r\n  public async verify(): Promise<boolean> {\r\n    return true;\r\n  }\r\n}\r\n","import { ModelBasic } from '../ModelBasic';\r\n\r\nexport class Operator extends ModelBasic {\r\n  public static readonly EQ: string = 'eq';\r\n  public static readonly NEQ: string = 'neq';\r\n  public static readonly GT: string = 'gt';\r\n  public static readonly GTEQ: string = 'gteq';\r\n  public static readonly LT: string = 'lt';\r\n  public static readonly LTEQ: string = 'lteq';\r\n  public static readonly IS_PART_OF: string = 'isPartOf';\r\n  public static readonly HAS_PART: string = 'hasPart';\r\n  public static readonly IS_A: string = 'isA';\r\n  public static readonly IS_ALL_OF: string = 'isAllOf';\r\n  public static readonly IS_ANY_OF: string = 'isAnyOf';\r\n  public static readonly IS_NONE_OF: string = 'isNoneOf';\r\n\r\n  public static readonly NE: string = 'ne';\r\n  public static readonly GTE: string = 'gte';\r\n  public static readonly LTE: string = 'lte';\r\n\r\n  public value: string;\r\n  constructor(value: string) {\r\n    super();\r\n    this.value = value;\r\n  }\r\n\r\n  public async verify(): Promise<boolean> {\r\n    const isValid = Object.values(Operator).includes(this.value);\r\n    if (!isValid) {\r\n      throw new Error(`Operator not valid: '${this.value}'`);\r\n    }\r\n    return isValid;\r\n  }\r\n}\r\n","import { ModelBasic } from '../ModelBasic';\r\n\r\nexport class RightOperand extends ModelBasic {\r\n  public '@id'?: string;\r\n  public value: string | number | [];\r\n\r\n  constructor(value: string | number) {\r\n    super();\r\n    this._instanceOf = 'RightOperand';\r\n    this.value = value;\r\n  }\r\n\r\n  public async verify(): Promise<boolean> {\r\n    //\r\n    return true;\r\n  }\r\n}\r\n","import { ModelBasic } from '../ModelBasic';\r\nimport { EntityRegistry } from 'EntityRegistry';\r\n\r\nexport class LeftOperand extends ModelBasic {\r\n  public value: string;\r\n\r\n  constructor(value: string) {\r\n    super();\r\n    this.value = value;\r\n  }\r\n\r\n  public getValue(): string {\r\n    //\r\n    return this.value;\r\n  }\r\n\r\n  public async evaluate(): Promise<[string | number, string[]] | null> {\r\n    try {\r\n      const fetcher = this._rootUID\r\n        ? EntityRegistry.getDataFetcherFromPolicy(this._rootUID)\r\n        : undefined;\r\n      if (fetcher) {\r\n        const _value = this.value.charAt(0).toLowerCase() + this.value.slice(1);\r\n        const types = fetcher.getTypes(_value);\r\n        const value = await fetcher.context[_value]();\r\n        if (types.length && types.includes('date')) {\r\n          const dateTime = new Date(value).getTime();\r\n          if (isNaN(dateTime)) {\r\n            console.warn(\r\n              `\\x1b[93m/!\\\\\"${value}\" is not a supported Date\\x1b[37m`,\r\n            );\r\n          }\r\n          return [dateTime, types];\r\n        }\r\n        return [value, types];\r\n      } else {\r\n        console.warn(\r\n          `\\x1b[93m/!\\\\No data fetcher found, can't evaluate \"${this.value}\"\\x1b[37m`,\r\n        );\r\n      }\r\n    } catch (error: any) {\r\n      console.error(`LeftOperand function \"${this.value}\" not found`);\r\n    }\r\n    return null;\r\n  }\r\n\r\n  public async verify(): Promise<boolean> {\r\n    return true;\r\n  }\r\n}\r\n","import { ModelBasic } from '../ModelBasic';\r\nimport { LeftOperand } from './LeftOperand';\r\nimport { LogicalConstraint } from './LogicalConstraint';\r\nimport { Operator } from './Operator';\r\nimport { RightOperand } from './RightOperand';\r\n\r\nexport abstract class Constraint extends ModelBasic {\r\n  public uid?: string;\r\n  public dataType?: string;\r\n  public unit?: string;\r\n  public status?: number;\r\n  public operator: Operator | null;\r\n  public leftOperand: LeftOperand | null;\r\n  public rightOperand: RightOperand | null;\r\n  private rightOperandReference?: null | string | string[];\r\n  private logicalConstraints?: null | LogicalConstraint[];\r\n  constructor(\r\n    leftOperand: LeftOperand | null,\r\n    operator: Operator | null,\r\n    rightOperand: RightOperand | null,\r\n  ) {\r\n    super();\r\n    this.leftOperand = leftOperand;\r\n    this.operator = operator;\r\n    this.rightOperand = rightOperand;\r\n  }\r\n\r\n  async evaluate(): Promise<boolean> {\r\n    return false;\r\n  }\r\n\r\n  protected async verify(): Promise<boolean> {\r\n    try {\r\n      const isValid =\r\n        (this.uid === undefined || typeof this.uid === 'string') &&\r\n        (this.dataType === undefined || typeof this.dataType === 'string') &&\r\n        (this.unit === undefined || typeof this.unit === 'string') &&\r\n        (this.status === undefined || typeof this.status === 'number');\r\n      if (!isValid) {\r\n        throw new Error('Some of your constraint properties are invalid');\r\n      }\r\n      return isValid;\r\n    } catch (error: any) {\r\n      throw error.message;\r\n    }\r\n  }\r\n}\r\n","import { Operator } from './Operator';\r\nimport { RightOperand } from './RightOperand';\r\nimport { LeftOperand } from './LeftOperand';\r\nimport { Constraint } from './Constraint';\r\nimport { EntityRegistry } from 'EntityRegistry';\r\n\r\ntype BasicTypes =\r\n  | number\r\n  | string\r\n  | boolean\r\n  | Date\r\n  | object\r\n  | null\r\n  | undefined\r\n  | Array<any>;\r\n\r\nexport class AtomicConstraint extends Constraint {\r\n  constructor(\r\n    leftOperand: LeftOperand,\r\n    operator: Operator,\r\n    rightOperand: RightOperand,\r\n  ) {\r\n    super(leftOperand, operator, rightOperand);\r\n  }\r\n\r\n  public async evaluate(): Promise<boolean> {\r\n    if (this.leftOperand && this.rightOperand) {\r\n      const fetcher = this.leftOperand._rootUID\r\n        ? EntityRegistry.getDataFetcherFromPolicy(this.leftOperand._rootUID)\r\n        : undefined;\r\n      if (fetcher) {\r\n        const bypass = fetcher.hasBypassFor(this.leftOperand.getValue());\r\n        if (bypass) {\r\n          return true;\r\n        }\r\n      }\r\n      const evaluation: unknown = await this.leftOperand.evaluate();\r\n      if (evaluation) {\r\n        const [leftValue, types] = evaluation as [BasicTypes, string[]];\r\n        let rightValue = this.rightOperand.value;\r\n        if (types && types.includes('date') && !Array.isArray(rightValue)) {\r\n          rightValue = new Date(rightValue).getTime();\r\n          if (isNaN(rightValue)) {\r\n            console.warn(\r\n              `\\x1b[93m/!\\\\\"${rightValue}\" is not a supported Date\\x1b[37m`,\r\n            );\r\n          }\r\n        }\r\n        switch (this.operator?.value) {\r\n          case Operator.EQ:\r\n            return leftValue === rightValue;\r\n\r\n          case Operator.NE:\r\n          case Operator.NEQ:\r\n            return leftValue !== rightValue;\r\n\r\n          case Operator.GT:\r\n            return (leftValue as number) > (rightValue as number);\r\n\r\n          case Operator.GTE:\r\n          case Operator.GTEQ:\r\n            return (leftValue as number) >= (rightValue as number);\r\n\r\n          case Operator.LT:\r\n            return (leftValue as number) < (rightValue as number);\r\n\r\n          case Operator.LTE:\r\n          case Operator.LTEQ:\r\n            return (leftValue as number) <= (rightValue as number);\r\n          case Operator.IS_NONE_OF:\r\n            return (\r\n              Array.isArray(rightValue) &&\r\n              !(rightValue as Array<any>).includes(leftValue)\r\n            );\r\n          case Operator.IS_A:\r\n            return AtomicConstraint.isA(leftValue, rightValue);\r\n        }\r\n      }\r\n    }\r\n    return false;\r\n  }\r\n\r\n  private static isA(\r\n    leftValue: BasicTypes,\r\n    rightValue: string | number | [],\r\n  ): boolean {\r\n    const type = typeof leftValue;\r\n    const value =\r\n      typeof rightValue === 'string' ? rightValue.toLowerCase() : '';\r\n    switch (value) {\r\n      case 'string':\r\n        return type === 'string';\r\n      case 'number':\r\n        return type === 'number';\r\n      case 'boolean':\r\n        return type === 'boolean';\r\n      case 'object':\r\n        return leftValue !== null && type === 'object';\r\n      case 'array':\r\n        return Array.isArray(leftValue);\r\n      case 'date':\r\n        return leftValue instanceof Date;\r\n      case 'required':\r\n        return (\r\n          leftValue !== null &&\r\n          leftValue !== undefined &&\r\n          leftValue !== '' &&\r\n          leftValue !== 0 &&\r\n          leftValue !== false\r\n        );\r\n      default:\r\n        return false;\r\n    }\r\n  }\r\n\r\n  public async verify(): Promise<boolean> {\r\n    const isValid =\r\n      (await super.verify()) &&\r\n      this.leftOperand instanceof LeftOperand &&\r\n      this.operator instanceof Operator &&\r\n      this.rightOperand instanceof RightOperand;\r\n    if (!isValid) {\r\n      throw new Error('AtomicConstraint propertie invalid');\r\n    }\r\n    return isValid;\r\n  }\r\n}\r\n","import { Constraint } from './Constraint';\r\nimport { Operator } from './Operator';\r\n\r\nexport class LogicalConstraint extends Constraint {\r\n  static readonly operands: string[] = ['and', 'andSequence', 'or', 'xone'];\r\n  private constraint: Constraint[];\r\n  private operand?: string;\r\n  constructor(operand: string) {\r\n    super(null, null, null);\r\n    this.operand = operand;\r\n    this.constraint = [];\r\n  }\r\n  public addConstraint(constraint: Constraint) {\r\n    this.constraint.push(constraint);\r\n  }\r\n  // Todo\r\n  async evaluate(): Promise<boolean> {\r\n    switch (this.operand) {\r\n      case 'and':\r\n        return (\r\n          await Promise.all(\r\n            this.constraint.map((constraint) => constraint.evaluate()),\r\n          )\r\n        ).every((result) => result);\r\n      case 'or':\r\n        return (\r\n          await Promise.all(\r\n            this.constraint.map((constraint) => constraint.evaluate()),\r\n          )\r\n        ).some((result) => result);\r\n      default:\r\n        return false;\r\n    }\r\n  }\r\n\r\n  public async verify(): Promise<boolean> {\r\n    const isValid =\r\n      (await super.verify()) &&\r\n      this.operand &&\r\n      LogicalConstraint.operands.includes(this.operand);\r\n    if (!isValid) {\r\n      throw new Error(`LogicalConstraint propertie invalid '${this.operand}'`);\r\n    }\r\n    return isValid;\r\n  }\r\n}\r\n","import { Party } from './Party';\r\nimport { RulePermission } from './RulePermission';\r\nimport { Policy } from './Policy';\r\n\r\nexport class PolicyAgreement extends Policy {\r\n  '@type': 'Agreement' = 'Agreement';\r\n  permission: RulePermission[] = [];\r\n  assigner?: Party;\r\n  assignee?: Party;\r\n\r\n  constructor(uid: string, context: string) {\r\n    super(uid, context, 'Agreement');\r\n  }\r\n\r\n  public setAssigner(assigner?: Party) {\r\n    this.assigner = assigner;\r\n  }\r\n\r\n  public setAssignee(assignee?: Party) {\r\n    this.assignee = assignee;\r\n  }\r\n\r\n  public async evaluate(): Promise<boolean> {\r\n    return false;\r\n  }\r\n\r\n  public async verify(): Promise<boolean> {\r\n    return true;\r\n  }\r\n}\r\n","import { Party } from './Party';\r\nimport { RulePermission } from './RulePermission';\r\nimport { Policy } from './Policy';\r\n\r\nexport class PolicyOffer extends Policy {\r\n  '@type': 'Offer' = 'Offer';\r\n  permission: RulePermission[] = [];\r\n  assigner?: Party;\r\n  assignee?: Party;\r\n\r\n  constructor(uid: string, context: string) {\r\n    super(uid, context, 'Offer');\r\n  }\r\n\r\n  public async evaluate(): Promise<boolean> {\r\n    return false;\r\n  }\r\n\r\n  public async verify(): Promise<boolean> {\r\n    return true;\r\n  }\r\n}\r\n","import { RulePermission } from './RulePermission';\r\nimport { Policy } from './Policy';\r\n\r\nexport class PolicySet extends Policy {\r\n  '@type': 'Set' = 'Set';\r\n  permission: RulePermission[] = [];\r\n\r\n  constructor(uid: string, context: string) {\r\n    super(uid, context, 'Set');\r\n  }\r\n\r\n  public async evaluate(): Promise<boolean> {\r\n    return false;\r\n  }\r\n\r\n  public async verify(): Promise<boolean> {\r\n    return true;\r\n  }\r\n}\r\n","export enum CopyMode {\r\n  all = 0,\r\n  exclude = 1,\r\n  include = 2,\r\n}\r\n/**\r\n * Copies specified attributes from 'element' to 'instance' based on the selected mode.\r\n * @param instance The object to which attributes will be copied.\r\n * @param element The object from which attributes will be copied.\r\n * @param attributes An optional array of attributes to include or exclude in the copy process. Default is an empty array.\r\n * @param mode An optional mode specifying whether to include or exclude attributes. Default is CopyMode.all.\r\n */\r\nexport const copy = (\r\n  instance: Record<string, any> | null | undefined,\r\n  element: Record<string, any>,\r\n  attributes: string[] = [],\r\n  mode: CopyMode = 0,\r\n): void => {\r\n  if (instance) {\r\n    // Get keys of 'element'\r\n    let keys = Object.keys(element);\r\n    // Filter keys based on mode and attributes\r\n    if (mode !== CopyMode.all) {\r\n      keys = keys.filter((key) => {\r\n        const included = attributes.includes(key);\r\n        return mode === CopyMode.exclude ? !included : included;\r\n      });\r\n    }\r\n    // Copy attributes from 'element' to 'instance'\r\n    keys.forEach((key: string) => {\r\n      // Exclude functions from copying\r\n      if (typeof instance[key] !== 'function') {\r\n        instance[key] = element[key];\r\n      }\r\n    });\r\n  }\r\n};\r\n\r\nexport const getLastTerm = (input: string): string | undefined => {\r\n  const a = input.split('/');\r\n  const b = a.pop();\r\n  return b === '' ? a.pop() : b;\r\n};\r\n\r\n/**\r\n * Checks if the object is an instance of at least one of the specified classes in the array.\r\n * @param classes The array of classes to check against.\r\n * @param object The object to check.\r\n * @returns true if the object is an instance of any of the classes in the array, otherwise false.\r\n */\r\nexport const isInstanceOfAny = (classes: any[], object: any): boolean => {\r\n  for (const value of classes) {\r\n    if (object instanceof value) {\r\n      return true;\r\n    }\r\n  }\r\n  return false;\r\n};\r\n\r\nexport const getNode = (obj: any, path: string): any | undefined => {\r\n  return (\r\n    path &&\r\n    path\r\n      .split('.')\r\n      .reduce(\r\n        (acc, key) => (acc && acc[key] !== undefined ? acc[key] : undefined),\r\n        obj,\r\n      )\r\n  );\r\n};\r\n\r\nexport const Custom = (): MethodDecorator => {\r\n  return (\r\n    target: any,\r\n    key: string | symbol,\r\n    descriptor: PropertyDescriptor,\r\n  ) => {\r\n    if (descriptor && typeof descriptor.value === 'function') {\r\n      target.customMethods = target.customMethods || [];\r\n      target.customMethods.push(key);\r\n    }\r\n  };\r\n};\r\n\r\nexport const getDurationMatching = (\r\n  isoDurationString: string,\r\n): RegExpExecArray | null => {\r\n  const durationRegex =\r\n    /^P(?!$)(?:(\\d+(?:\\.\\d+)?)Y)?(?:(\\d+(?:\\.\\d+)?)M)?(?:(\\d+(?:\\.\\d+)?)W)?(?:(\\d+(?:\\.\\d+)?)D)?(?:T(?=\\d)(?:(\\d+(?:\\.\\d+)?)H)?(?:(\\d+(?:\\.\\d+)?)M)?(?:(\\d+(?:\\.\\d+)?)S)?)?$/;\r\n  return durationRegex.exec(isoDurationString);\r\n};\r\n\r\nexport const parseISODuration = (\r\n  isoDurationString: string,\r\n  match?: RegExpExecArray | null,\r\n): number => {\r\n  if (!match) {\r\n    match = getDurationMatching(isoDurationString);\r\n  }\r\n  if (!match) {\r\n    throw new Error(`Invalid ISO 8601 duration format: ${isoDurationString}`);\r\n  }\r\n  const [, years, months, weeks, days, hours, minutes, seconds] = match.map(\r\n    (v) => (v ? parseFloat(v) : 0),\r\n  );\r\n  let totalMilliseconds = 0;\r\n  if (years) {\r\n    totalMilliseconds += years * 365.25 * 24 * 60 * 60 * 1000;\r\n  }\r\n  if (months) {\r\n    totalMilliseconds += months * 30.44 * 24 * 60 * 60 * 1000;\r\n  }\r\n  if (weeks) {\r\n    totalMilliseconds += weeks * 7 * 24 * 60 * 60 * 1000;\r\n  }\r\n  if (days) {\r\n    totalMilliseconds += days * 24 * 60 * 60 * 1000;\r\n  }\r\n  if (hours) {\r\n    totalMilliseconds += hours * 60 * 60 * 1000;\r\n  }\r\n  if (minutes) {\r\n    totalMilliseconds += minutes * 60 * 1000;\r\n  }\r\n  if (seconds) {\r\n    totalMilliseconds += seconds * 1000;\r\n  }\r\n  if (totalMilliseconds === 0) {\r\n    throw new Error(\r\n      `No valid duration components found in: ${isoDurationString}`,\r\n    );\r\n  }\r\n  return totalMilliseconds;\r\n};\r\n","import { ModelBasic } from '../ModelBasic';\r\nimport { PartyCollection } from './PartyCollection';\r\n\r\nexport class Party extends ModelBasic {\r\n  public uid: string;\r\n  private partOf?: PartyCollection;\r\n  constructor(uid: string) {\r\n    super();\r\n    this.uid = uid;\r\n  }\r\n  public async verify(): Promise<boolean> {\r\n    return true;\r\n  }\r\n}\r\n","import { ModelBasic } from 'models/ModelBasic';\r\nimport { Action, actions } from './models/odrl/Action';\r\nimport { Asset } from './models/odrl/Asset';\r\nimport { AtomicConstraint } from './models/odrl/AtomicConstraint';\r\nimport { Constraint } from './models/odrl/Constraint';\r\nimport { LeftOperand } from './models/odrl/LeftOperand';\r\nimport { LogicalConstraint } from './models/odrl/LogicalConstraint';\r\nimport { Operator } from './models/odrl/Operator';\r\nimport { Policy } from './models/odrl/Policy';\r\nimport { PolicyAgreement } from './models/odrl/PolicyAgreement';\r\nimport { PolicyOffer } from './models/odrl/PolicyOffer';\r\nimport { PolicySet } from './models/odrl/PolicySet';\r\nimport { RightOperand } from './models/odrl/RightOperand';\r\nimport { Rule } from './models/odrl/Rule';\r\nimport { RuleDuty } from './models/odrl/RuleDuty';\r\nimport { RulePermission } from './models/odrl/RulePermission';\r\nimport { RuleProhibition } from './models/odrl/RuleProhibition';\r\nimport {\r\n  CopyMode,\r\n  copy,\r\n  getDurationMatching,\r\n  getLastTerm,\r\n  parseISODuration,\r\n} from './utils';\r\nimport { Party } from 'models/odrl/Party';\r\n\r\ntype InstanciatorFunction = (\r\n  node: any,\r\n  parent: any,\r\n  root: Policy | null,\r\n  fromArray?: boolean,\r\n) => any;\r\n\r\nexport class PolicyInstanciator {\r\n  public policy: Policy | null;\r\n  public static instance: PolicyInstanciator;\r\n\r\n  constructor() {\r\n    this.policy = null;\r\n    Action.includeIn('use', [\r\n      'Attribution',\r\n      'CommericalUse',\r\n      'DerivativeWorks',\r\n      'Distribution',\r\n      'Notice',\r\n      'Reproduction',\r\n      'ShareAlike',\r\n      'Sharing',\r\n      'SourceCode',\r\n      'acceptTracking',\r\n      'aggregate',\r\n      'annotate',\r\n      'anonymize',\r\n      'archive',\r\n      'attribute',\r\n      'compensate',\r\n      'concurrentUse',\r\n      'delete',\r\n      'derive',\r\n      'digitize',\r\n      'distribute',\r\n      'ensureExclusivity',\r\n      'execute',\r\n      'grantUse',\r\n      'include',\r\n      'index',\r\n      'inform',\r\n      'install',\r\n      'modify',\r\n      'move',\r\n      'nextPolicy',\r\n      'obtainConsent',\r\n      'play',\r\n      'present',\r\n      'print',\r\n      'read',\r\n      'reproduce',\r\n      'reviewPolicy',\r\n      'stream',\r\n      'synchronize',\r\n      'textToSpeech',\r\n      'transform',\r\n      'translate',\r\n      'uninstall',\r\n      'watermark',\r\n    ]);\r\n    Action.includeIn('play', ['display']);\r\n    Action.includeIn('extract', ['reproduce']);\r\n    Action.includeIn('transfer', ['give', 'sell']);\r\n  }\r\n\r\n  public static getInstance(): PolicyInstanciator {\r\n    if (!PolicyInstanciator.instance) {\r\n      PolicyInstanciator.instance = new PolicyInstanciator();\r\n    }\r\n    return PolicyInstanciator.instance;\r\n  }\r\n\r\n  private static readonly instanciators: Record<string, InstanciatorFunction> =\r\n    {\r\n      permission: PolicyInstanciator.setPermission,\r\n      prohibition: PolicyInstanciator.setProhibition,\r\n      obligation: PolicyInstanciator.setObligation,\r\n      duty: PolicyInstanciator.setDuty,\r\n      action: PolicyInstanciator.setAction,\r\n      target: PolicyInstanciator.setTarget,\r\n      constraint: PolicyInstanciator.setConstraint,\r\n      refinement: PolicyInstanciator.setRefinement,\r\n      consequence: PolicyInstanciator.setConsequence,\r\n      remedy: PolicyInstanciator.setRemedy,\r\n    };\r\n\r\n  private static setPermission(\r\n    element: any,\r\n    parent: Policy,\r\n    root: Policy | null,\r\n  ): RulePermission {\r\n    const rule = new RulePermission();\r\n    rule.setParent(parent);\r\n    parent.addPermission(rule);\r\n    return rule;\r\n  }\r\n\r\n  private static setProhibition(\r\n    element: any,\r\n    parent: Policy,\r\n    root: Policy | null,\r\n  ): RuleProhibition {\r\n    const rule = new RuleProhibition();\r\n    rule.setParent(parent);\r\n    parent.addProhibition(rule);\r\n    return rule;\r\n  }\r\n\r\n  private static setObligation(\r\n    element: any,\r\n    parent: Policy,\r\n    root: Policy | null,\r\n  ): RuleDuty {\r\n    const { assigner, assignee } = element;\r\n    const rule = new RuleDuty(\r\n      assigner && new Party(assigner),\r\n      assignee && new Party(assignee),\r\n    );\r\n    rule.setParent(parent);\r\n    rule._type = 'obligation';\r\n    parent.addDuty(rule);\r\n    return rule;\r\n  }\r\n\r\n  private static setDuty(\r\n    element: any,\r\n    parent: RulePermission,\r\n    root: Policy | null,\r\n  ) {\r\n    const { assigner, assignee } = element;\r\n    const rule = new RuleDuty(\r\n      assigner && new Party(assigner),\r\n      assignee && new Party(assignee),\r\n    );\r\n    rule.setParent(parent);\r\n    rule._type = 'duty';\r\n    parent.addDuty(rule);\r\n    return rule;\r\n  }\r\n\r\n  private static setAction(\r\n    element: string | any,\r\n    parent: Rule,\r\n    root: Policy | null,\r\n    fromArray?: boolean,\r\n  ): Action {\r\n    try {\r\n      const value = getLastTerm(\r\n        typeof element === 'object' ? element.value : element,\r\n      );\r\n      if (!value) {\r\n        throw new Error('Invalid action');\r\n      }\r\n      // const action = new Action(value, null);\r\n      const action = PolicyInstanciator.construct(Action, value, null);\r\n      action._rootUID = root?._objectUID;\r\n      action.setParent(parent);\r\n      if (!fromArray) {\r\n        parent.setAction(action);\r\n      } else {\r\n        parent.addAction(action);\r\n      }\r\n      return action;\r\n    } catch (error: any) {\r\n      throw new Error('Action is undefined');\r\n    }\r\n  }\r\n\r\n  private static setTarget(\r\n    element: any,\r\n    parent: Rule,\r\n    root: Policy | null,\r\n  ): void {\r\n    const asset = new Asset(element);\r\n    asset.setParent(parent);\r\n    parent.setTarget(asset);\r\n  }\r\n\r\n  private static setConstraint(\r\n    element: any,\r\n    parent: LogicalConstraint | Rule | Action,\r\n    root: Policy | null,\r\n  ): Constraint {\r\n    const {\r\n      leftOperand,\r\n      operator: _operator,\r\n      rightOperand,\r\n      constraint: constraints,\r\n    } = element;\r\n\r\n    let _rightOperand = rightOperand;\r\n    const match = getDurationMatching(rightOperand);\r\n    if (match) {\r\n      // && todo\r\n      _rightOperand = parseISODuration(rightOperand);\r\n    }\r\n    const operator = _operator && getLastTerm(_operator);\r\n    const constraint: Constraint =\r\n      (leftOperand &&\r\n        operator &&\r\n        _rightOperand !== undefined &&\r\n        new AtomicConstraint(\r\n          (() => {\r\n            const _leftOperand = new LeftOperand(leftOperand);\r\n            _leftOperand._rootUID = root?._objectUID;\r\n            return _leftOperand;\r\n          })(),\r\n          new Operator(operator),\r\n          PolicyInstanciator.construct(RightOperand, _rightOperand),\r\n        )) ||\r\n      (operator &&\r\n        Array.isArray(constraints) &&\r\n        constraints.length > 0 &&\r\n        new LogicalConstraint(operator));\r\n    copy(\r\n      constraint,\r\n      element,\r\n      ['constraint', 'leftOperand', 'operator', 'rightOperand'],\r\n      CopyMode.exclude,\r\n    );\r\n    if (constraint) {\r\n      constraint.setParent(parent);\r\n    }\r\n    parent.addConstraint(constraint || element);\r\n    return constraint;\r\n  }\r\n\r\n  private static setRefinement(\r\n    element: any,\r\n    parent: Action,\r\n    root: Policy | null,\r\n  ): Constraint {\r\n    return PolicyInstanciator.setConstraint(element, parent, root);\r\n  }\r\n\r\n  private static setRemedy(\r\n    element: any,\r\n    parent: RuleProhibition,\r\n    root: Policy | null,\r\n  ): RuleDuty {\r\n    const { assigner, assignee } = element;\r\n    const rule = new RuleDuty(\r\n      assigner && new Party(assigner),\r\n      assignee && new Party(assignee),\r\n    );\r\n    rule.setParent(parent);\r\n    rule._type = 'remedy';\r\n    parent.addRemedy(rule);\r\n    return rule;\r\n  }\r\n\r\n  private static setConsequence(\r\n    element: any,\r\n    parent: RuleDuty,\r\n    root: Policy | null,\r\n  ): RuleDuty {\r\n    const { assigner, assignee } = element;\r\n    const rule = new RuleDuty(\r\n      assigner && new Party(assigner),\r\n      assignee && new Party(assignee),\r\n    );\r\n    copy(\r\n      rule,\r\n      element,\r\n      ['compensatedParty', 'compensatingParty'],\r\n      CopyMode.include,\r\n    );\r\n    rule.setParent(parent);\r\n    rule._type = 'consequence';\r\n    parent.addConsequence(rule);\r\n    return rule;\r\n  }\r\n\r\n  private selectPolicyType(json: any): void {\r\n    const context = json['@context'];\r\n    switch (json['@type']) {\r\n      case 'Offer':\r\n        this.policy = new PolicyOffer(json.uid, context);\r\n        break;\r\n      case 'Set':\r\n        this.policy = new PolicySet(json.uid, context);\r\n        break;\r\n      case 'Agreement':\r\n        const policy = new PolicyAgreement(json.uid, context);\r\n        policy.setAssignee(json.assignee && new Party(json.assignee));\r\n        policy.setAssigner(json.assigner && new Party(json.assigner));\r\n        this.policy = policy;\r\n        break;\r\n      default:\r\n        throw new Error(`Unknown policy type: ${json['@type']}`);\r\n    }\r\n  }\r\n\r\n  public genPolicyFrom(json: any): Policy | null {\r\n    try {\r\n      this.selectPolicyType(json);\r\n      this.traverse(json, this.policy);\r\n      return this.policy;\r\n    } catch (error: any) {\r\n      console.error(error.message);\r\n    }\r\n    return null;\r\n  }\r\n\r\n  public traverse(node: any, parent: any): void {\r\n    const instanciate = (\r\n      property: string,\r\n      element: any,\r\n      fromArray: boolean = false,\r\n    ) => {\r\n      try {\r\n        if (element) {\r\n          const child: ModelBasic =\r\n            PolicyInstanciator.instanciators[property] &&\r\n            ((PolicyInstanciator.instanciators[property].length == 4 &&\r\n              PolicyInstanciator.instanciators[property](\r\n                element,\r\n                parent,\r\n                this.policy,\r\n                fromArray,\r\n              )) ||\r\n              PolicyInstanciator.instanciators[property](\r\n                element,\r\n                parent,\r\n                this.policy,\r\n              ));\r\n          if (typeof element === 'object') {\r\n            if (child) {\r\n              this.traverse(element, child);\r\n            } else if (property !== '@context') {\r\n              console.warn(\r\n                `\\x1b[93m/!\\\\Traversal stopped for \"${property}\".\\x1b[37m`,\r\n              );\r\n            }\r\n          }\r\n        }\r\n      } catch (error: any) {\r\n        console.error(error.message);\r\n      }\r\n    };\r\n    for (const property in node) {\r\n      const element = node[property];\r\n      if (Array.isArray(element)) {\r\n        element.forEach((item: any) => {\r\n          instanciate(property, item, true);\r\n        });\r\n      } else {\r\n        instanciate(property, element);\r\n      }\r\n    }\r\n  }\r\n\r\n  public static construct<T>(\r\n    Type: new (...args: any[]) => T,\r\n    ...args: any[]\r\n  ): T {\r\n    const context = this.instance?.policy?.['@context'];\r\n    const isContextArray = Array.isArray(context);\r\n    if (!isContextArray) {\r\n      return Reflect.construct(Type, args);\r\n    }\r\n    const _namespace: string[] = [];\r\n    args = args.map((arg) => {\r\n      if (typeof arg === 'string' && /^[\\w-]+:[\\w-]+$/.test(arg)) {\r\n        const [prefix, value] = arg.split(':');\r\n        const ctx = context.find((c) => c[prefix]);\r\n        if (ctx) {\r\n          _namespace.push(prefix);\r\n          return value;\r\n        }\r\n      }\r\n      return arg;\r\n    });\r\n    const instance = Reflect.construct(Type, args);\r\n    (instance as { _namespace: string | string[] })._namespace = _namespace;\r\n    return instance;\r\n  }\r\n}\r\n\r\nexport default PolicyInstanciator.getInstance();\r\n","import { PolicyDataFetcher } from 'PolicyDataFetcher';\r\nimport { Policy } from './models/odrl/Policy';\r\nimport { Explorable } from 'models/Explorable';\r\nimport { Asset } from 'models/odrl/Asset';\r\nimport { RulePermission } from 'models/odrl/RulePermission';\r\nimport { RuleProhibition } from 'models/odrl/RuleProhibition';\r\nimport { Action, ActionType } from 'models/odrl/Action';\r\nimport { RuleDuty } from 'models/odrl/RuleDuty';\r\nimport { PolicyInstanciator } from 'PolicyInstanciator';\r\nimport { PolicyAgreement } from 'models/odrl/PolicyAgreement';\r\nimport { EntityRegistry } from 'EntityRegistry';\r\nimport { getNode } from 'utils';\r\nimport { Party } from 'models/odrl/Party';\r\nimport { Constraint } from 'models/odrl/Constraint';\r\nimport { PolicyStateFetcher } from 'PolicyStateFetcher';\r\n\r\ninterface Picker {\r\n  pick: (explorable: Explorable, options?: any) => boolean;\r\n  type: Function;\r\n}\r\ninterface Pickers {\r\n  [key: string]: Picker;\r\n}\r\ninterface DutyOptionPayload {\r\n  propertyName: string;\r\n  uidPath: string;\r\n  uidValue: string;\r\n}\r\ntype ParentRule = RulePermission | RuleProhibition | RuleDuty;\r\n\r\nexport class PolicyEvaluator {\r\n  public static instance: PolicyEvaluator;\r\n  private policies: Policy[];\r\n\r\n  private readonly pickers: Pickers = {\r\n    target: {\r\n      pick: this.pickTarget.bind(this),\r\n      type: Asset,\r\n    },\r\n    permission: {\r\n      pick: this.pickPermission.bind(this),\r\n      type: RulePermission,\r\n    },\r\n    prohibition: {\r\n      pick: this.pickProhibition.bind(this),\r\n      type: RuleProhibition,\r\n    },\r\n    assignee: {\r\n      pick: this.pickAssignedDuty.bind(this),\r\n      type: RuleDuty,\r\n    },\r\n    assigner: {\r\n      pick: this.pickEmittedDuty.bind(this),\r\n      type: RuleDuty,\r\n    },\r\n    pickDuties: {\r\n      pick: this.pickDuties.bind(this),\r\n      type: RuleDuty,\r\n    },\r\n  };\r\n\r\n  constructor() {\r\n    this.policies = [];\r\n  }\r\n\r\n  public static getInstance(): PolicyEvaluator {\r\n    if (!PolicyEvaluator.instance) {\r\n      PolicyEvaluator.instance = new PolicyEvaluator();\r\n    }\r\n    return PolicyEvaluator.instance;\r\n  }\r\n\r\n  private pickTarget(explorable: Explorable, options?: any): boolean {\r\n    if (explorable instanceof Asset) {\r\n      const uid = (explorable as Asset).uid;\r\n      const target = options?.target;\r\n      if (typeof target === 'object') {\r\n        return target.all || uid === target.uid;\r\n      }\r\n      return uid === target;\r\n    }\r\n    return false;\r\n  }\r\n\r\n  private pickEntityFor(\r\n    optionKey: string,\r\n    explorable: Explorable,\r\n    options: any,\r\n  ): boolean {\r\n    const payload: DutyOptionPayload = options[optionKey];\r\n    if (\r\n      (payload && explorable instanceof RuleDuty) ||\r\n      explorable instanceof RulePermission ||\r\n      explorable instanceof RuleProhibition ||\r\n      explorable instanceof PolicyAgreement\r\n    ) {\r\n      const uid = getNode(explorable, payload.uidPath);\r\n      return uid && uid === payload.uidValue;\r\n    }\r\n    return false;\r\n  }\r\n\r\n  private pickEmittedDuty(explorable: Explorable, options?: any): boolean {\r\n    return this.pickEntityFor('assigner', explorable, options);\r\n  }\r\n\r\n  private pickAssignedDuty(explorable: Explorable, options?: any): boolean {\r\n    return this.pickEntityFor('assignee', explorable, options);\r\n  }\r\n\r\n  private pickPermission(explorable: Explorable, options?: any): boolean {\r\n    console.log('pickPermission');\r\n    return true;\r\n  }\r\n\r\n  private pickProhibition(explorable: Explorable, options?: any): boolean {\r\n    console.log('pickProhibition');\r\n    return true;\r\n  }\r\n\r\n  private pickDuties(explorable: Explorable, options?: any): boolean {\r\n    const isRuleDuty = explorable instanceof RuleDuty;\r\n    if (isRuleDuty) {\r\n      const pickable =\r\n        options?.all === true ||\r\n        ((explorable as RuleDuty)._type !== 'consequence' &&\r\n          (explorable as RuleDuty)._type !== 'remedy');\r\n      return pickable;\r\n    }\r\n    return false;\r\n  }\r\n\r\n  public cleanPolicies(): void {\r\n    this.policies = [];\r\n  }\r\n\r\n  public addPolicy(\r\n    policy: Policy,\r\n    dataFetcher?: PolicyDataFetcher,\r\n    stateFetcher?: PolicyStateFetcher,\r\n  ): void {\r\n    if (dataFetcher) {\r\n      policy._fetcherUID = dataFetcher._objectUID;\r\n    }\r\n    if (stateFetcher) {\r\n      policy._stateFetcherUID = stateFetcher._objectUID;\r\n    }\r\n    this.policies.push(policy);\r\n  }\r\n\r\n  public setPolicy(\r\n    policy: Policy,\r\n    dataFetcher?: PolicyDataFetcher,\r\n    stateFetcher?: PolicyStateFetcher,\r\n  ): void {\r\n    this.cleanPolicies();\r\n    this.addPolicy(policy, dataFetcher, stateFetcher);\r\n  }\r\n\r\n  public logPolicies(): void {\r\n    this.policies.forEach((policy: Policy) => {\r\n      policy.debug();\r\n    });\r\n  }\r\n\r\n  private setFetcherOptions(options: any): void {\r\n    try {\r\n      if (!this.policies.length) {\r\n        throw new Error(\r\n          '[PolicyDataFetcher/setFetcherOptions]: Policy not found.',\r\n        );\r\n      }\r\n      this.policies.forEach((policy: Policy) => {\r\n        const fetcher = EntityRegistry.getDataFetcherFromPolicy(\r\n          policy._objectUID,\r\n        );\r\n        if (!fetcher) {\r\n          throw new Error(\r\n            '[PolicyDataFetcher/setFetcherOptions]: Fetcher not found.',\r\n          );\r\n        } else {\r\n          fetcher.setRequestOptions(options);\r\n        }\r\n      });\r\n    } catch (error: any) {\r\n      console.warn(`\\x1b[93m/!\\\\${error.message}\\x1b[37m`);\r\n    }\r\n  }\r\n\r\n  private pick = (explorable: Explorable, options?: any): boolean => {\r\n    for (const key in options) {\r\n      if (options.hasOwnProperty(key)) {\r\n        const picker: Picker = this.pickers[key];\r\n        if (\r\n          typeof picker.pick === 'function' &&\r\n          explorable instanceof picker.type\r\n        ) {\r\n          const pickable = picker.pick(explorable, options);\r\n          if (pickable) {\r\n            return true;\r\n          }\r\n        }\r\n      }\r\n    }\r\n    return false;\r\n  };\r\n\r\n  private async explore(options: any): Promise<Explorable[]> {\r\n    if (this.policies.length) {\r\n      const explorables: Explorable[] = (\r\n        await Promise.all(\r\n          this.policies.map(\r\n            async (policy: Policy) =>\r\n              await policy.explore(this.pick.bind(this), options),\r\n          ),\r\n        )\r\n      ).flat();\r\n      return explorables;\r\n    }\r\n    return [];\r\n  }\r\n\r\n  private static getAssigneePayload(assignee: string): DutyOptionPayload {\r\n    const payload: DutyOptionPayload = {\r\n      propertyName: 'assignee',\r\n      uidPath: 'assignee.uid',\r\n      uidValue: assignee,\r\n    };\r\n    return payload;\r\n  }\r\n\r\n  private static getAssignerPayload(assigner: string): DutyOptionPayload {\r\n    const payload: DutyOptionPayload = {\r\n      propertyName: 'assigner',\r\n      uidPath: 'assigner.uid',\r\n      uidValue: assigner,\r\n    };\r\n    return payload;\r\n  }\r\n\r\n  /**\r\n   * Retrieves a list of performable actions on the specified target.\r\n   * @param {string} target - A string representing the target.\r\n   * @returns {Promise<string[]>} A promise resolved with an array of performable actions.\r\n   */\r\n  // Todo, include duties processes\r\n  public async getPerformableActions(\r\n    target: string,\r\n    included: boolean = true,\r\n  ): Promise<string[]> {\r\n    const targets: Asset[] = (await this.explore({\r\n      target,\r\n    })) as Asset[];\r\n    const actionPromises: Record<string, Promise<boolean>[]> = {};\r\n    targets.forEach((target: Asset) => {\r\n      const parent: ParentRule = target.getParent() as ParentRule;\r\n      const action: Action = parent.action as Action;\r\n      if (!actionPromises[action.value]) {\r\n        actionPromises[action.value] = [];\r\n      }\r\n      actionPromises[action.value].push(parent.evaluate());\r\n    });\r\n    const actions: ActionType[] = [];\r\n    for (const [action, promises] of Object.entries(actionPromises)) {\r\n      const results = await Promise.all(promises);\r\n      const isPerformable = results.every((result) => result);\r\n      if (isPerformable) {\r\n        actions.push(action as ActionType);\r\n      }\r\n    }\r\n    return included ? Action.getIncluded(actions) : actions;\r\n  }\r\n\r\n  /**\r\n   * Retrieves the list of leftOperands associated with the specified target.\r\n   * @param {string} target - A string representing the target.\r\n   * @returns {Promise<string[]>} A promise resolved with an array of leftOperands.\r\n   */\r\n  public async listLeftOperandsFor(target: string): Promise<string[]> {\r\n    const targets: Asset[] = (await this.explore({\r\n      target,\r\n    })) as Asset[];\r\n\r\n    const leftOperands: Set<string> = new Set<string>();\r\n    targets.forEach((target: Asset) => {\r\n      const parent: ParentRule = target.getParent() as ParentRule;\r\n      const constraints: Constraint[] = parent.getConstraints() || [];\r\n      constraints.forEach((constraint: Constraint) => {\r\n        const leftOperand = constraint.leftOperand;\r\n        if (leftOperand) {\r\n          const value = leftOperand.getValue();\r\n          leftOperands.add(value);\r\n        }\r\n      });\r\n    });\r\n    return Array.from(leftOperands);\r\n  }\r\n\r\n  /**\r\n   * Verifies whether a specific action can be performed on a given target.\r\n   * @param {ActionType} actionType - A string representing the type of action.\r\n   * @param {string} target - A string representing the target.\r\n   * @param {boolean} defaultResult - A boolean defining the value to return if no corresponding target is found.\r\n   * @returns {Promise<boolean>} Resolves with a boolean indicating the feasibility of the action.\r\n   */\r\n  public async isActionPerformable(\r\n    // Todo, include duties processes\r\n    actionType: ActionType,\r\n    target: string,\r\n    defaultResult: boolean = false,\r\n  ): Promise<boolean> {\r\n    const targets: Asset[] = (await this.explore({\r\n      target,\r\n    })) as Asset[];\r\n    const results = await targets.reduce(\r\n      async (promise: Promise<boolean[]>, target: Asset) => {\r\n        const acc = await promise;\r\n        const parent: ParentRule = target.getParent() as ParentRule;\r\n        const action: Action = parent.action as Action;\r\n        // evaluate permission & prohibition\r\n        return (await action.includes(actionType))\r\n          ? acc.concat(await parent.evaluate())\r\n          : acc;\r\n      },\r\n      Promise.resolve([]),\r\n    );\r\n    return results.length ? results.every((result) => result) : defaultResult;\r\n  }\r\n\r\n  /**\r\n   * Evaluates the exploitability of listed resources within a set of policies.\r\n   * @param {any} json - JSON representation of policies to be evaluated.\r\n   * @param {boolean} [defaultResult=false] - The default result if no resources are found.\r\n   * @returns {Promise<boolean>} Resolves with a boolean indicating whether the resources are exploitable.\r\n   */\r\n  public async evalResourcePerformabilities(\r\n    json: any,\r\n    defaultResult: boolean = false,\r\n  ): Promise<boolean> {\r\n    const instanciator = new PolicyInstanciator();\r\n    instanciator.genPolicyFrom(json);\r\n    const evaluator = new PolicyEvaluator();\r\n    if (instanciator.policy) {\r\n      evaluator.setPolicy(instanciator.policy);\r\n    }\r\n    const targets: Asset[] = (await evaluator.explore({\r\n      target: { uid: '', all: true },\r\n    })) as Asset[];\r\n    const actionPromises: Promise<boolean>[] = targets.map(\r\n      async (target: Asset) => {\r\n        const parent: ParentRule = target.getParent() as ParentRule;\r\n        const actionType = (parent.action as Action).value as ActionType;\r\n        return target.uid\r\n          ? this.isActionPerformable(actionType, target.uid)\r\n          : false;\r\n      },\r\n    );\r\n    const results = await Promise.all(actionPromises);\r\n    return results.length ? results.every((result) => result) : defaultResult;\r\n  }\r\n\r\n  public async getDuties(): Promise<RuleDuty[]> {\r\n    return (await this.explore({\r\n      pickAllDuties: true,\r\n    })) as RuleDuty[];\r\n  }\r\n\r\n  public async getDutiesForTarget(\r\n    target: string,\r\n    fulfilled: boolean = false,\r\n  ): Promise<RuleDuty[]> {\r\n    const targets: Asset[] = (await this.explore({ target })) as Asset[];\r\n    const duties = await targets.reduce(\r\n      (accPromise: Promise<RuleDuty[]>, target: Asset) =>\r\n        accPromise.then(async (acc: RuleDuty[]) => {\r\n          const parent: ParentRule = target.getParent() as ParentRule;\r\n          if (parent && parent instanceof RuleDuty) {\r\n            const duty: RuleDuty = parent as RuleDuty;\r\n            const isValidDuty = !fulfilled || (await duty.evaluate());\r\n            if (isValidDuty) {\r\n              return [...acc, duty];\r\n            }\r\n          }\r\n          return acc;\r\n        }),\r\n      Promise.resolve([]),\r\n    );\r\n    return duties;\r\n  }\r\n\r\n  public async getDutiesFor(\r\n    action: string,\r\n    target: string,\r\n    fulfilled: boolean = false,\r\n  ): Promise<RuleDuty[]> {\r\n    const duties: RuleDuty[] = await this.getDutiesForTarget(target, fulfilled);\r\n    const filteredDuties: RuleDuty[] = [];\r\n\r\n    const dutyFilterPromises = duties.map(async (duty: RuleDuty) => {\r\n      const dutyAction = duty.action as Action;\r\n      if (dutyAction.value === action) {\r\n        const isValidDuty = await duty.evaluate();\r\n        if (isValidDuty) {\r\n          filteredDuties.push(duty);\r\n        }\r\n      }\r\n    });\r\n    await Promise.all(dutyFilterPromises);\r\n    return filteredDuties;\r\n  }\r\n\r\n  public async getAssignedDuties(assignee: string): Promise<RuleDuty[]> {\r\n    const payload = PolicyEvaluator.getAssigneePayload(assignee);\r\n    return (await this.explore({\r\n      assignee: payload,\r\n    })) as RuleDuty[];\r\n  }\r\n\r\n  public async getEmittedDuties(assigner: string): Promise<any[]> {\r\n    const payload = PolicyEvaluator.getAssigneePayload(assigner);\r\n    return (await this.explore({\r\n      assigner: payload,\r\n    })) as RuleDuty[];\r\n  }\r\n\r\n  /**\r\n   * Evaluates whether the duties related to an assignee are fulfilled.\r\n   * @param {string} assignee - The string value representing the assignee.\r\n   * @param {boolean} [defaultResult=false] - The default result if no duties are found.\r\n   * @returns {Promise<boolean>} Resolves with a boolean indicating whether the duties are fulfilled.\r\n   */\r\n  public async fulfillDuties(\r\n    assignee: string,\r\n    defaultResult: boolean = false,\r\n  ): Promise<boolean> {\r\n    this.setFetcherOptions({ assignee });\r\n    const payload = PolicyEvaluator.getAssigneePayload(assignee);\r\n    const entities: Explorable[] = (await this.explore({\r\n      assignee: payload,\r\n      // agreementAssignee: payload,\r\n      // permissionAssignee: payload,\r\n      // prohibitionAssignee: payload,\r\n    })) as Explorable[];\r\n    return this.evalDuties(entities, defaultResult);\r\n  }\r\n\r\n  /**\r\n   * Evaluates whether the agreement is fulfilled by the assignee.\r\n   * @param {boolean} [defaultResult=false] - The default result if no duties are found.\r\n   * @returns {Promise<boolean>} Resolves with a boolean indicating whether the agreement is fulfilled.\r\n   */\r\n  public async evalAgreementForAssignee(\r\n    assignee?: string,\r\n    defaultResult: boolean = false,\r\n  ): Promise<boolean> {\r\n    // Todo:\r\n    /*\r\n    if (!assignee) {\r\n      assignee = (this.policies?.[0] as PolicyAgreement).assignee;\r\n    }\r\n    */\r\n    this.setFetcherOptions({ assignee });\r\n    const entities: Explorable[] = await this.explore({\r\n      pickDuties: {\r\n        parentEntityClass: [Policy],\r\n      },\r\n    });\r\n    entities.filter((entity) => {\r\n      const party: Party | undefined = (entity as RuleDuty).assignee;\r\n      return !party?.uid;\r\n    }) as Explorable[];\r\n    return this.evalDuties(entities, defaultResult);\r\n  }\r\n\r\n  /**\r\n   * Evaluates whether certain duties are fulfilled based on the related action conditions.\r\n   * @param {Explorable[]} entities - An array of entities to be explored.\r\n   * @param {boolean} [defaultResult=false] - The default result if no duties are found.\r\n   * @returns {Promise<boolean>} Resolves with a boolean indicating whether the duties are fulfilled.\r\n   */\r\n  private async evalDuties(\r\n    entities: Explorable[],\r\n    defaultResult: boolean = false,\r\n  ): Promise<boolean> {\r\n    const results = await entities.reduce(\r\n      async (promise: Promise<boolean[]>, entity: Explorable) => {\r\n        const acc = await promise;\r\n        if (entity instanceof RuleDuty) {\r\n          return acc.concat(await (entity as RuleDuty).evaluate());\r\n        }\r\n        return acc;\r\n      },\r\n      Promise.resolve([]),\r\n    );\r\n    return results.length ? results.every((result) => result) : defaultResult;\r\n  }\r\n\r\n  // Todo: Retrieve the expected value for a specific duty action\r\n}\r\n\r\nexport default PolicyEvaluator.getInstance();\r\n","import { PolicyDataFetcher, Custom } from 'PolicyDataFetcher';\r\nimport policyEvaluator, { PolicyEvaluator } from './PolicyEvaluator';\r\nimport policyInstanciator, { PolicyInstanciator } from './PolicyInstanciator';\r\nimport { ActionType } from 'models/odrl/Action';\r\n\r\nexport const evaluator: PolicyEvaluator = policyEvaluator;\r\nexport const instanciator: PolicyInstanciator = policyInstanciator;\r\nexport {\r\n  ActionType,\r\n  PolicyDataFetcher,\r\n  Custom,\r\n  PolicyEvaluator,\r\n  PolicyInstanciator,\r\n};\r\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAWO,IAAM,kBAAN,MAAM,gBAAe;AAAA,EAI1B,OAAc,yBACZ,SAC+B;AAC/B,UAAM,OAAmB,gBAAe,iBAAiB,OAAO;AAChE,YAAO,6BAAM,eACT,gBAAe,iBAAiB,KAAK,WAAW,IAChD;AAAA,EACN;AAAA,EAEA,OAAc,0BACZ,SACgC;AAChC,UAAM,OAAmB,gBAAe,iBAAiB,OAAO;AAChE,YAAO,6BAAM,oBACT,gBAAe,iBAAiB,KAAK,gBAAgB,IACrD;AAAA,EACN;AAAA,EAEA,OAAc,UAAU,KAA8B;AACpD,WAAO,gBAAe,iBAAiB,GAAG;AAAA,EAC5C;AAAA,EAEA,OAAc,aAAa,OAAkB;AAC3C,oBAAe,iBAAiB,MAAM,UAAU,IAAI;AAAA,EACtD;AAAA,EAEA,OAAc,kBAAwB;AACpC,oBAAe,kBAAkB,CAAC;AAClC,oBAAe,mBAAmB,CAAC;AAAA,EACrC;AAAA,EAEA,OAAc,UAAU,OAAmB,QAA0B;AACnE,oBAAe,gBAAgB,MAAM,UAAU,IAAI,OAAO;AAAA,EAC5D;AAAA,EAEA,OAAc,UAAU,OAA+B;AACrD,UAAM,MAAM,gBAAe,gBAAgB,MAAM,UAAU;AAC3D,WAAO,gBAAe,iBAAiB,GAAG;AAAA,EAC5C;AACF;AA3Ca,gBACI,kBAAmC,CAAC;AADxC,gBAEI,mBAAqC,CAAC;AAFhD,IAAM,iBAAN;;;ACVP,SAAS,kBAAkB;AAmBpB,IAAe,gBAAf,MAA6B;AAAA,EAMlC,cAAc;AALd,SAAQ,SAAmB,CAAC;AAC5B,SAAU,WAA6B,CAAC;AAExC,SAAU,UAAe,CAAC;AAGxB,SAAK,aAAa,WAAW;AAC7B,mBAAe,aAAa,IAAI;AAChC,UAAM,YAAY,OAAO,eAAe,IAAI;AAC5C,UAAM,UAAU,UAAU,iBAAiB,CAAC;AAC5C,YAAQ,QAAQ,CAAC,WAAmB;AAClC,YAAM,eAAe,OAAO,QAAQ,QAAQ,EAAE;AAC9C,YAAM,wBACJ,aAAa,OAAO,CAAC,EAAE,YAAY,IAAI,aAAa,MAAM,CAAC;AAC7D,WAAK,SAAS,qBAA4C,IACxD,KAAK,MAA6B,EAClC,KAAK,IAAI;AAAA,IACb,CAAC;AAAA,EACH;AAAA,EAEO,kBAAkB,SAAc;AACrC,SAAK,UAAU;AAAA,EACjB;AAAA,EAEO,aAAa,MAAc;AAChC,WAAO,KAAK,OAAO,SAAS,IAAI;AAAA,EAClC;AAAA,EAEO,aAAa,MAAc;AAChC,WAAO,KAAK,OAAO,KAAK,IAAI;AAAA,EAC9B;AAGF;;;ACpDO,IAAM,SAAS,MAAuB;AAC3C,SAAO,CACL,QACA,KACA,eACG;AACH,QAAI,cAAc,OAAO,WAAW,UAAU,YAAY;AACxD,aAAO,gBAAgB,OAAO,iBAAiB,CAAC;AAChD,aAAO,cAAc,KAAK,GAAG;AAAA,IAC/B;AAAA,EACF;AACF;AAwCO,IAAe,oBAAf,cAAyC,cAAc;AAAA,EAY5D,cAAc;AACZ,UAAM;AAZR,SAAQ,QAAqC;AAAA,MAC3C,MAAM;AAAA,QACJ;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,QACA;AAAA,MACF;AAAA;AAAA,IAEF;AAIE,SAAK,WAAW;AAAA,MACd,kBAAkB,KAAK,oBAAoB,KAAK,IAAI;AAAA,MACpD,cAAc,KAAK,gBAAgB,KAAK,IAAI;AAAA,MAC5C,yBAAyB,KAAK,2BAA2B,KAAK,IAAI;AAAA,MAClE,0BAA0B,KAAK,4BAA4B,KAAK,IAAI;AAAA,MACpE,OAAO,KAAK,SAAS,KAAK,IAAI;AAAA,MAC9B,UAAU,KAAK,YAAY,KAAK,IAAI;AAAA,MACpC,aAAa,KAAK,eAAe,KAAK,IAAI;AAAA,MAC1C,iBAAiB,KAAK,mBAAmB,KAAK,IAAI;AAAA,MAClD,QAAQ,KAAK,UAAU,KAAK,IAAI;AAAA,MAChC,aAAa,KAAK,eAAe,KAAK,IAAI;AAAA,MAC1C,OAAO,KAAK,SAAS,KAAK,IAAI;AAAA,MAC9B,YAAY,KAAK,cAAc,KAAK,IAAI;AAAA,MACxC,UAAU,KAAK,YAAY,KAAK,IAAI;AAAA,MACpC,UAAU,KAAK,YAAY,KAAK,IAAI;AAAA,MACpC,OAAO,KAAK,SAAS,KAAK,IAAI;AAAA,MAC9B,aAAa,KAAK,eAAe,KAAK,IAAI;AAAA,MAC1C,WAAW,KAAK,aAAa,KAAK,IAAI;AAAA,MACtC,YAAY,KAAK,cAAc,KAAK,IAAI;AAAA,MACxC,SAAS,KAAK,WAAW,KAAK,IAAI;AAAA,MAClC,SAAS,KAAK,WAAW,KAAK,IAAI;AAAA,MAClC,WAAW,KAAK,aAAa,KAAK,IAAI;AAAA,MACtC,kBAAkB,KAAK,oBAAoB,KAAK,IAAI;AAAA,MACpD,cAAc,KAAK,gBAAgB,KAAK,IAAI;AAAA,MAC5C,yBAAyB,KAAK,2BAA2B,KAAK,IAAI;AAAA,MAClE,0BAA0B,KAAK,4BAA4B,KAAK,IAAI;AAAA,MACpE,YAAY,KAAK,cAAc,KAAK,IAAI;AAAA,MACxC,SAAS,KAAK,WAAW,KAAK,IAAI;AAAA,MAClC,oBAAoB,KAAK,sBAAsB,KAAK,IAAI;AAAA,MACxD,QAAQ,KAAK,UAAU,KAAK,IAAI;AAAA,MAChC,cAAc,KAAK,gBAAgB,KAAK,IAAI;AAAA,MAC5C,cAAc,KAAK,gBAAgB,KAAK,IAAI;AAAA,MAC5C,aAAa,KAAK,eAAe,KAAK,IAAI;AAAA,MAC1C,SAAS,KAAK,WAAW,KAAK,IAAI;AAAA,MAClC,iBAAiB,KAAK,mBAAmB,KAAK,IAAI;AAAA,OAC/C,KAAK;AAAA,EAEZ;AAAA,EAEO,SAAS,aAA+B;AAC7C,WAAO,OAAO,QAAQ,KAAK,KAAK,EAC7B,QAAQ,CAAC,CAAC,KAAK,MAAM,MAAO,OAAO,SAAS,WAAW,IAAI,MAAM,CAAC,CAAE,EACpE,OAAO,OAAO;AAAA,EACnB;AAAA,EAEA,IAAW,UAAgC;AACzC,WAAO,KAAK;AAAA,EACd;AAAA,EAEgB,sBAAuC;AAAA;AACrD,aAAO;AAAA,IACT;AAAA;AAAA,EAEgB,kBAAmC;AAAA;AACjD,aAAO;AAAA,IACT;AAAA;AAAA,EAEgB,6BAAwD;AAAA;AACtE,aAAO,CAAC,GAAG,CAAC;AAAA,IACd;AAAA;AAAA,EAEgB,8BAA6C;AAAA;AAC3D,aAAO,oBAAI,KAAK;AAAA,IAClB;AAAA;AAAA,EAEgB,WAA4B;AAAA;AAC1C,aAAO;AAAA,IACT;AAAA;AAAA,EAEgB,cAA6B;AAAA;AAC3C,aAAO,oBAAI,KAAK;AAAA,IAClB;AAAA;AAAA,EAEgB,iBAAkC;AAAA;AAChD,aAAO;AAAA,IACT;AAAA;AAAA,EAEgB,qBAAsC;AAAA;AACpD,aAAO;AAAA,IACT;AAAA;AAAA,EAEgB,YAA6B;AAAA;AAC3C,aAAO;AAAA,IACT;AAAA;AAAA,EAEgB,iBAAkC;AAAA;AAChD,aAAO;AAAA,IACT;AAAA;AAAA,EAEgB,WAA4B;AAAA;AAC1C,aAAO;AAAA,IACT;AAAA;AAAA,EAEgB,gBAAiC;AAAA;AAC/C,aAAO;AAAA,IACT;AAAA;AAAA,EAEgB,cAA+B;AAAA;AAC7C,aAAO;AAAA,IACT;AAAA;AAAA,EAEgB,cAA+B;AAAA;AAC7C,aAAO;AAAA,IACT;AAAA;AAAA,EAEgB,WAA4B;AAAA;AAC1C,aAAO;AAAA,IACT;AAAA;AAAA,EAEgB,iBAAkC;AAAA;AAChD,aAAO;AAAA,IACT;AAAA;AAAA,EAEgB,eAAgC;AAAA;AAC9C,aAAO;AAAA,IACT;AAAA;AAAA,EAEgB,gBAAiC;AAAA;AAC/C,aAAO;AAAA,IACT;AAAA;AAAA,EAEgB,aAA8B;AAAA;AAC5C,aAAO;AAAA,IACT;AAAA;AAAA,EAEgB,aAA8B;AAAA;AAC5C,aAAO;AAAA,IACT;AAAA;AAAA,EAEgB,eAAgC;AAAA;AAC9C,aAAO;AAAA,IACT;AAAA;AAAA,EAEgB,sBAAuC;AAAA;AACrD,aAAO;AAAA,IACT;AAAA;AAAA,EAEgB,kBAAmC;AAAA;AACjD,aAAO;AAAA,IACT;AAAA;AAAA,EAEgB,6BAAwD;AAAA;AACtE,aAAO,CAAC,GAAG,CAAC;AAAA,IACd;AAAA;AAAA,EAEgB,8BAA6C;AAAA;AAC3D,aAAO,oBAAI,KAAK;AAAA,IAClB;AAAA;AAAA,EAEgB,gBAAiC;AAAA;AAC/C,aAAO;AAAA,IACT;AAAA;AAAA,EAEgB,aAA8B;AAAA;AAC5C,aAAO;AAAA,IACT;AAAA;AAAA,EAEgB,wBAAmD;AAAA;AACjE,aAAO,CAAC,GAAG,CAAC;AAAA,IACd;AAAA;AAAA,EAEgB,YAA6B;AAAA;AAC3C,aAAO;AAAA,IACT;AAAA;AAAA,EAEgB,kBAAmC;AAAA;AACjD,aAAO;AAAA,IACT;AAAA;AAAA,EAEgB,kBAAyC;AAAA;AACvD,YAAM,MAAM,oBAAI,KAAK;AACrB,aAAO,CAAC,KAAK,GAAG;AAAA,IAClB;AAAA;AAAA,EAEgB,iBAAkC;AAAA;AAChD,aAAO;AAAA,IACT;AAAA;AAAA,EAEgB,aAA8B;AAAA;AAC5C,aAAO;AAAA,IACT;AAAA;AAAA,EAEgB,qBAAsC;AAAA;AACpD,aAAO;AAAA,IACT;AAAA;AACF;;;AC3PA,SAAS,cAAAA,mBAAkB;AAsBpB,IAAe,aAAf,MAAe,YAAW;AAAA,EAO/B,cAAc;AACZ,SAAK,aAAaC,YAAW;AAC7B,mBAAe,aAAa,IAAI;AAAA,EAClC;AAAA,EAEU,gBAAgB;AAExB,YAAQ,IAAI,eAAe;AAAA,EAC7B;AAAA,EAEO,UAAU,QAA0B;AACzC,mBAAe,UAAU,MAAM,MAAM;AAAA,EACvC;AAAA,EAEO,YAAwB;AAC7B,WAAO,eAAe,UAAU,IAAI;AAAA,EACtC;AAAA;AAAA,EAIU,SAAS,QAAgB,GAAG,UAAoC;AACxE,aAAS;AAAA,OACN,MAA8B;AAC7B,YAAI;AACF,mBAAS,KAAK,KAAK,OAAO,CAAC;AAC3B,qBAAW,QAAQ,MAAM;AACvB,gBAAI,KAAK,eAAe,IAAI,GAAG;AAC7B,oBAAM,QAAS,KAAa,IAAI;AAChC,kBAAI,MAAM,QAAQ,KAAK,GAAG;AACxB,2BAAW,QAAQ,OAAO;AACxB,sBACE,gBAAgB,eAChB,OAAO,KAAK,aAAa,YACzB;AACA,yBAAK,SAAS,QAAQ,GAAG,QAAQ;AAAA,kBACnC,YACI,OAAO,SAAS,YAChB,OAAO,SAAS,aAChB,gBAAgB,QAChB,OAAO,SAAS,aAChB,KAAK,gBAAgB,kBACvB,SAAS,cACT,SAAS,cACT;AAAA,kBAEF,OAAO;AACL,0BAAM,IAAI;AAAA,sBACR,kBAAkB,KAAK,UAAU,MAAM,MAAM,CAAC,CAAC;AAAA,oBACjD;AAAA,kBACF;AAAA,gBACF;AAAA,cACF,WACE,iBAAiB,eACjB,OAAO,MAAM,aAAa,YAC1B;AACA,sBAAM,SAAS,QAAQ,GAAG,QAAQ;AAAA,cACpC,OAAO;AACL,oBAAI,OAAO,UAAU,YAAY,UAAU,MAAM;AAC/C,wBAAM,IAAI;AAAA,oBACR,kBAAkB,KAAK,UAAU,OAAO,MAAM,CAAC,CAAC;AAAA,kBAClD;AAAA,gBACF;AAAA,cACF;AAAA,YACF;AAAA,UACF;AACA,iBAAO;AAAA,QACT,SAAS,OAAY;AACnB,kBAAQ,MAAM,0BAA0B,MAAM,OAAO,UAAU;AAC/D,iBAAO;AAAA,QACT;AAAA,MACF,IAAG;AAAA,IACL;AAAA,EACF;AAAA;AAAA,EAEO,MAAM,QAAgB,GAAS;AACpC,UAAM,cAAc,KAAK,OAAO,KAAK;AACrC,YAAQ;AAAA,MACN,WAAW,WAAW,SAAS,KAAK,YAAY,IAAI;AAAA,IACtD;AAEA,eAAW,QAAQ,MAAM;AACvB,UAAI,KAAK,eAAe,IAAI,GAAG;AAC7B,cAAM,QAAS,KAAa,IAAI;AAEhC,YAAI,MAAM,QAAQ,KAAK,GAAG;AACxB,kBAAQ,IAAI,GAAG,WAAW,KAAK,IAAI,qBAAqB;AACxD,qBAAW,QAAQ,OAAO;AACxB,gBACE,gBAAgB,eAChB,OAAO,KAAK,UAAU,YACtB;AACA,mBAAK,MAAM,QAAQ,CAAC;AAAA,YACtB,YACI,OAAO,SAAS,YAChB,OAAO,SAAS,aAChB,gBAAgB,QAChB,OAAO,SAAS,aAChB,KAAK,gBAAgB,kBACvB,SAAS,cACT,SAAS,cACT;AACA,sBAAQ;AAAA,gBACN,GAAG,WAAW,eAAe,KAAK;AAAA,kBAChC;AAAA,kBACA;AAAA,kBACA;AAAA,gBACF,EAAE,QAAQ,QAAQ;AAAA,EAAK,WAAW,MAAM,CAAC;AAAA,cAC3C;AAAA,YACF,OAAO;AACL,sBAAQ;AAAA,gBACN,WAAW,WAAW,OAAO,KAAK,UAAU,IAAI,CAAC;AAAA,cACnD;AAAA,YACF;AAAA,UACF;AACA,kBAAQ,IAAI,GAAG,WAAW,qBAAqB;AAAA,QACjD,WACE,iBAAiB,eACjB,OAAO,MAAM,UAAU,YACvB;AACA,gBAAM,MAAM,QAAQ,CAAC;AAAA,QACvB,OAAO;AACL,cAAI,OAAO,UAAU,YAAY,UAAU,MAAM;AAC/C,oBAAQ;AAAA,cACN,WAAW,WAAW,MAAM,IAAI,KAAK,KAAK;AAAA,gBACxC;AAAA,cACF,CAAC;AAAA,YACH;AAAA,UACF,OAAO;AACL,gBACE,SAAS,gBACT,SAAS,cACT,SAAS,eACT;AACA,sBAAQ;AAAA,gBACN,GAAG,WAAW,sBAAsB,IAAI,aAAa,KAAK;AAAA,cAC5D;AAAA,YACF;AAAA,UACF;AAAA,QACF;AAAA,MACF;AAAA,IACF;AAAA,EACF;AACF;;;AC1KO,IAAe,aAAf,MAAe,oBAAmB,WAAW;AAAA,EAGxC,QACR,MACA,QAAgB,GAChB,UACA,SACM;AACN,QAAI,KAAK,MAAM,OAAO,GAAG;AACvB,eAAS,KAAK,IAAI;AAAA,IACpB;AACA,eAAW,QAAQ,MAAM;AACvB,UAAI,KAAK,eAAe,IAAI,GAAG;AAC7B,cAAM,QAAS,KAAa,IAAI;AAChC,YAAI,MAAM,QAAQ,KAAK,GAAG;AACxB,qBAAW,QAAQ,OAAO;AACxB,gBACE,gBAAgB,eAChB,OAAO,KAAK,YAAY,YACxB;AACA,mBAAK,QAAQ,MAAM,QAAQ,GAAG,UAAU,OAAO;AAAA,YACjD;AAAA,UACF;AAAA,QACF,WACE,iBAAiB,eACjB,OAAO,MAAM,YAAY,YACzB;AACA,gBAAM,QAAQ,MAAM,QAAQ,GAAG,UAAU,OAAO;AAAA,QAClD;AAAA,MACF;AAAA,IACF;AAAA,EACF;AACF;;;AC5BO,IAAe,SAAf,MAAe,gBAAe,WAAW;AAAA,EAW9C,YAAY,KAAa,SAAwB,MAAc;AAC7D,UAAM;AAXR,SAAU,cAA4B;AAYpC,SAAK,MAAM;AACX,SAAK,UAAU,IAAI;AACnB,SAAK,OAAO,IAAI;AAChB,SAAK,aAAa,CAAC;AACnB,SAAK,cAAc,CAAC;AACpB,SAAK,aAAa,CAAC;AAAA,EACrB;AAAA,EAEA,IAAW,cAAgC;AACzC,WAAO,KAAK;AAAA,EACd;AAAA,EAEA,IAAW,eAAkC;AAC3C,WAAO,KAAK;AAAA,EACd;AAAA,EAEA,IAAW,cAAgC;AACzC,WAAO,KAAK;AAAA,EACd;AAAA,EAEO,cAAc,YAAkC;AACrD,SAAK,WAAW,KAAK,UAAU;AAAA,EACjC;AAAA,EAEO,eAAe,aAAoC;AACxD,SAAK,YAAY,KAAK,WAAW;AAAA,EACnC;AAAA,EAEO,QAAQ,aAA6B;AAC1C,SAAK,WAAW,KAAK,WAAW;AAAA,EAClC;AAAA,EAEa,WAA6B;AAAA;AACxC,YAAM,WAA+B,CAAC;AACtC,0CAAM,iBAAN,MAAe,GAAG,QAAQ;AAC1B,aAAO,QAAQ,IAAI,QAAQ,EAAE;AAAA,QAAK,CAAC,YACjC,QAAQ,MAAM,CAAC,WAAW,MAAM;AAAA,MAClC;AAAA,IACF;AAAA;AAAA,EAEa,QAAQ,QAAkB,SAAsC;AAAA;AAC3E,YAAM,cAA4B,CAAC;AACnC,0CAAM,gBAAN,MAAc,QAAQ,GAAG,aAAa,OAAO;AAC7C,aAAO;AAAA,IACT;AAAA;AACF;;;AC9DO,IAAM,QAAN,cAAoB,WAAW;AAAA,EAKpC,YACE,QAGA;AACA,UAAM;AACN,QAAI,OAAO,WAAW,UAAU;AAC9B,WAAK,MAAM;AAAA,IACb,OAAO;AACL,WAAK,MAAM,OAAO;AAClB,WAAK,SAAS,OAAO;AACrB,WAAK,YAAY,OAAO;AAAA,IAC1B;AAAA,EACF;AAAA,EACgB,WAA6B;AAAA;AAC3C,aAAO;AAAA,IACT;AAAA;AAAA,EACa,SAA2B;AAAA;AACtC,aAAO;AAAA,IACT;AAAA;AACF;;;ACrBO,IAAe,OAAf,cAA4B,WAAW;AAAA,EAc5C,YAAY,KAAc;AACxB,UAAM;AACN,QAAI,KAAK;AACP,WAAK,MAAM;AAAA,IACb;AAAA,EACF;AAAA,EAEA,IAAW,cAA4B;AACrC,QAAI,KAAK,eAAe,QAAW;AACjC,WAAK,aAAa,CAAC;AAAA,IACrB;AACA,WAAO,KAAK;AAAA,EACd;AAAA,EAEO,UAAU,OAAoB;AACnC,SAAK,SAAS;AAAA,EAChB;AAAA,EAEO,UAAU,QAAsB;AACrC,SAAK,SAAS;AAAA,EAChB;AAAA,EAEO,UAAU,QAAsB;AACrC,QAAI,KAAK,WAAW,QAAW;AAC7B,WAAK,SAAS,CAAC;AAAA,IACjB;AACA,IAAC,KAAK,OAAyB,KAAK,MAAM;AAAA,EAC5C;AAAA,EAEO,cAAc,YAAwB;AAC3C,SAAK,YAAY,KAAK,UAAU;AAAA,EAClC;AAAA,EAEO,YAA+B;AACpC,WAAO,KAAK;AAAA,EACd;AAAA,EAEO,YAA2C;AAChD,WAAO,KAAK;AAAA,EACd;AAAA,EAEO,iBAA+B;AACpC,WAAO,KAAK;AAAA,EACd;AACF;;;AC9DO,IAAM,iBAAN,cAA6B,KAAK;AAAA,EAEvC,cAAc;AACZ,UAAM;AAAA,EACR;AAAA,EAEO,QAAQ,MAAgB;AAC7B,QAAI,KAAK,SAAS,QAAW;AAC3B,WAAK,OAAO,CAAC;AAAA,IACf;AACA,SAAK,KAAK,KAAK,IAAI;AAAA,EACrB;AAAA,EAEa,WAA6B;AAAA;AACxC,YAAM,SAAS,MAAM,QAAQ,IAAI;AAAA,QAC/B,KAAK,oBAAoB;AAAA,QACzB,KAAK,eAAe;AAAA,MACtB,CAAC;AACD,aAAO,OAAO,MAAM,OAAO;AAAA,IAC7B;AAAA;AAAA,EAEc,iBAAmC;AAAA;AAC/C,UAAI;AACF,YAAI,KAAK,MAAM;AACb,gBAAM,MAAM,MAAM,QAAQ,IAAI,KAAK,KAAK,IAAI,CAAC,SAAS,KAAK,SAAS,CAAC,CAAC;AACtE,iBAAO,IAAI,MAAM,OAAO;AAAA,QAC1B;AACA,eAAO;AAAA,MACT,SAAS,OAAO;AACd,gBAAQ,MAAM,gCAAgC,KAAK;AAAA,MACrD;AACA,aAAO;AAAA,IACT;AAAA;AAAA,EAEc,sBAAwC;AAAA;AACpD,UAAI;AACF,YAAI,KAAK,aAAa;AACpB,gBAAM,MAAM,MAAM,QAAQ;AAAA,YACxB,KAAK,YAAY,IAAI,CAAC,eAAe,WAAW,SAAS,CAAC;AAAA,UAC5D;AACA,iBAAO,IAAI,MAAM,OAAO;AAAA,QAC1B;AAAA,MACF,SAAS,OAAO;AACd,gBAAQ,MAAM,gCAAgC,KAAK;AAAA,MACrD;AACA,aAAO;AAAA,IACT;AAAA;AAAA,EAEa,SAA2B;AAAA;AACtC,aAAO;AAAA,IACT;AAAA;AACF;;;AClDO,IAAM,kBAAN,cAA8B,KAAK;AAAA,EAExC,cAAc;AACZ,UAAM;AAAA,EACR;AAAA,EAEO,UAAU,MAAgB;AAC/B,QAAI,KAAK,WAAW,QAAW;AAC7B,WAAK,SAAS,CAAC;AAAA,IACjB;AACA,SAAK,OAAO,KAAK,IAAI;AAAA,EACvB;AAAA,EAEa,WAA6B;AAAA;AACxC,YAAM,SAAS,MAAM,QAAQ,IAAI;AAAA,QAC/B,KAAK,oBAAoB;AAAA,QACzB,KAAK,iBAAiB;AAAA,MACxB,CAAC;AACD,aAAO,OAAO,MAAM,OAAO;AAAA,IAC7B;AAAA;AAAA,EAEc,mBAAqC;AAAA;AACjD,UAAI;AACF,YAAI,KAAK,QAAQ;AACf,gBAAM,MAAM,MAAM,QAAQ;AAAA,YACxB,KAAK,OAAO,IAAI,CAAC,WAAW,OAAO,SAAS,CAAC;AAAA,UAC/C;AACA,iBAAO,IAAI,MAAM,OAAO;AAAA,QAC1B;AACA,eAAO;AAAA,MACT,SAAS,OAAO;AACd,gBAAQ,MAAM,gCAAgC,KAAK;AAAA,MACrD;AACA,aAAO;AAAA,IACT;AAAA;AAAA;AAAA,EAGc,sBAAwC;AAAA;AACpD,UAAI;AACF,YAAI,KAAK,aAAa;AACpB,gBAAM,MAAM,MAAM,QAAQ;AAAA,YACxB,KAAK,YAAY,IAAI,CAAC,eAAe,WAAW,SAAS,CAAC;AAAA,UAC5D;AACA,cAAI,IAAI,QAAQ;AACd,mBAAO,IAAI,MAAM,CAAC,UAAU,UAAU,KAAK;AAAA,UAC7C;AACA,iBAAO;AAAA,QACT;AAAA,MACF,SAAS,OAAO;AACd,gBAAQ,MAAM,gCAAgC,KAAK;AAAA,MACrD;AACA,aAAO;AAAA,IACT;AAAA;AAAA,EAEa,SAA2B;AAAA;AACtC,aAAO;AAAA,IACT;AAAA;AACF;;;ACzDO,IAAM,WAAN,cAAuB,KAAK;AAAA,EAMjC,YAAY,UAAkB,UAAkB;AAC9C,UAAM;AACN,QAAI,UAAU;AACZ,WAAK,WAAW;AAAA,IAClB;AACA,QAAI,UAAU;AACZ,WAAK,WAAW;AAAA,IAClB;AAAA,EACF;AAAA,EAEa,WAA6B;AAAA;AACxC,YAAM,SAAS,MAAM,QAAQ,IAAI;AAAA,QAC/B,KAAK,oBAAoB;AAAA,QACzB,KAAK,gBAAgB;AAAA,MACvB,CAAC;AACD,aAAO,OAAO,MAAM,OAAO;AAAA,IAC7B;AAAA;AAAA,EAEc,kBAAoC;AAAA;AAChD,UAAI,MAAM,QAAQ,KAAK,MAAM,GAAG;AAC9B,cAAM,YAAY,MAAM,QAAQ;AAAA,UAC9B,KAAK,OAAO,IAAI,CAAC,WAAmB,OAAO,OAAO,CAAC;AAAA,QACrD;AACA,eAAO,UAAU,MAAM,OAAO;AAAA,MAChC,WAAW,KAAK,kBAAkB,QAAQ;AACxC,eAAO,KAAK,OAAO,SAAS;AAAA,MAC9B;AACA,aAAO;AAAA,IACT;AAAA;AAAA,EAEc,sBAAwC;AAAA;AACpD,UAAI;AACF,YAAI,KAAK,aAAa;AACpB,gBAAM,MAAM,MAAM,QAAQ;AAAA,YACxB,KAAK,YAAY,IAAI,CAAC,eAAe,WAAW,SAAS,CAAC;AAAA,UAC5D;AACA,iBAAO,IAAI,MAAM,OAAO;AAAA,QAC1B;AAAA,MACF,SAAS,OAAO;AACd,gBAAQ,MAAM,gCAAgC,KAAK;AAAA,MACrD;AACA,aAAO;AAAA,IACT;AAAA;AAAA,EAEa,SAA2B;AAAA;AACtC,aAAO;AAAA,IACT;AAAA;AAAA,EAEO,eAAe,aAAuB;AAC3C,QAAI,KAAK,gBAAgB,QAAW;AAClC,WAAK,cAAc,CAAC;AAAA,IACtB;AACA,SAAK,YAAY,KAAK,WAAW;AAAA,EACnC;AACF;;;ACoBO,IAAM,UAAN,MAAM,gBAAe,WAAW;AAAA,EAQrC,YAAY,OAAe,YAA2B;AACpD,UAAM;AACN,SAAK,QAAQ;AACb,SAAK,aAAa;AAElB,YAAO,UAAU,OAAO,CAAC,KAAK,KAAK,CAAC;AAAA,EACtC;AAAA,EAEA,OAAc,UAAU,SAAiB,QAAkB;AACzD,QAAI,aAAsC,QAAO,WAAW,IAAI,OAAO;AACvE,QAAI,CAAC,YAAY;AACf,mBAAa,oBAAI,IAAY;AAC7B,cAAO,WAAW,IAAI,SAAS,UAAU;AAAA,IAC3C;AACA,aAAS,SAAS,QAAQ;AACxB,iBAAW,IAAI,KAAK;AAAA,IACtB;AAAA,EACF;AAAA,EAEO,cAAc,YAAwB;AAC3C,QAAI,KAAK,eAAe,QAAW;AACjC,WAAK,aAAa,CAAC;AAAA,IACrB;AACA,SAAK,WAAW,KAAK,UAAU;AAAA,EACjC;AAAA,EAEa,SAAS,OAAiC;AAAA;AAtHzD;AAuHI,eAAO,aAAO,WAAW,IAAI,KAAK,KAAK,MAAhC,mBAAmC,IAAI,WAAU;AAAA,IAC1D;AAAA;AAAA,EAEA,OAAoB,YAAY,QAA6C;AAAA;AAC3E,YAAM,cAA4B,CAAC;AACnC,aAAO,QAAQ,CAAC,UAAsB;AACpC,cAAM,iBAAiB,QAAO,WAAW,IAAI,KAAK;AAClD,0BACE,YAAY,KAAK,GAAI,MAAM,KAAK,cAAc,CAAkB;AAAA,MACpE,CAAC;AACD,aAAO,MAAM,KAAK,IAAI,IAAI,WAAW,CAAC;AAAA,IACxC;AAAA;AAAA,EAEa,WAA6B;AAAA;AACxC,YAAM,SAAS,KAAK,OAAO;AAC3B,YAAM,OAAO,KAAK,UAAU;AAC5B,UAAI,gBAAgB,UAAU;AAC5B,cAAM,MAAM,MAAM,QAAQ,IAAI;AAAA,UAC5B;AAAA,WACC,MAA8B;AAC7B,gBAAI;AACF,oBAAM,UAAU,KAAK,WACjB,eAAe,0BAA0B,KAAK,QAAQ,IACtD;AACJ,kBAAI,SAAS;AACX,uBAAO,QAAQ,QAAQ,KAAK,KAAK,EAAE;AAAA,cACrC,OAAO;AACL,wBAAQ;AAAA,kBACN,uDAAuD,KAAK,KAAK;AAAA,gBACnE;AAAA,cACF;AAAA,YACF,SAAS,OAAY;AACnB,sBAAQ,MAAM,uBAAuB,KAAK,KAAK,UAAU;AAAA,YAC3D;AACA,mBAAO;AAAA,UACT,IAAG;AAAA,QACL,CAAC;AACD,eAAO,IAAI,MAAM,OAAO;AAAA,MAC1B;AACA,aAAO;AAAA,IACT;AAAA;AAAA,EAEa,SAA2B;AAAA;AACtC,UAAI;AACF,YAAI,KAAK,YAAY;AACnB,gBAAM,MAAM,MAAM,QAAQ;AAAA,YACxB,KAAK,WAAW,IAAI,CAAC,eAAe,WAAW,SAAS,CAAC;AAAA,UAC3D;AACA,iBAAO,IAAI,MAAM,OAAO;AAAA,QAC1B;AAAA,MACF,SAAS,OAAO;AACd,gBAAQ,MAAM,gCAAgC,KAAK;AAAA,MACrD;AACA,aAAO;AAAA,IACT;AAAA;AAAA,EAEa,SAA2B;AAAA;AACtC,aAAO;AAAA,IACT;AAAA;AACF;AA9Fa,QACI,aAA2B,oBAAI,IAAI;AAD7C,IAAM,SAAN;;;AClFA,IAAM,YAAN,MAAM,kBAAiB,WAAW;AAAA,EAmBvC,YAAY,OAAe;AACzB,UAAM;AACN,SAAK,QAAQ;AAAA,EACf;AAAA,EAEa,SAA2B;AAAA;AACtC,YAAM,UAAU,OAAO,OAAO,SAAQ,EAAE,SAAS,KAAK,KAAK;AAC3D,UAAI,CAAC,SAAS;AACZ,cAAM,IAAI,MAAM,wBAAwB,KAAK,KAAK,GAAG;AAAA,MACvD;AACA,aAAO;AAAA,IACT;AAAA;AACF;AA/Ba,UACY,KAAa;AADzB,UAEY,MAAc;AAF1B,UAGY,KAAa;AAHzB,UAIY,OAAe;AAJ3B,UAKY,KAAa;AALzB,UAMY,OAAe;AAN3B,UAOY,aAAqB;AAPjC,UAQY,WAAmB;AAR/B,UASY,OAAe;AAT3B,UAUY,YAAoB;AAVhC,UAWY,YAAoB;AAXhC,UAYY,aAAqB;AAZjC,UAcY,KAAa;AAdzB,UAeY,MAAc;AAf1B,UAgBY,MAAc;AAhBhC,IAAM,WAAN;;;ACAA,IAAM,eAAN,cAA2B,WAAW;AAAA,EAI3C,YAAY,OAAwB;AAClC,UAAM;AACN,SAAK,cAAc;AACnB,SAAK,QAAQ;AAAA,EACf;AAAA,EAEa,SAA2B;AAAA;AAEtC,aAAO;AAAA,IACT;AAAA;AACF;;;ACbO,IAAM,cAAN,cAA0B,WAAW;AAAA,EAG1C,YAAY,OAAe;AACzB,UAAM;AACN,SAAK,QAAQ;AAAA,EACf;AAAA,EAEO,WAAmB;AAExB,WAAO,KAAK;AAAA,EACd;AAAA,EAEa,WAAwD;AAAA;AACnE,UAAI;AACF,cAAM,UAAU,KAAK,WACjB,eAAe,yBAAyB,KAAK,QAAQ,IACrD;AACJ,YAAI,SAAS;AACX,gBAAM,SAAS,KAAK,MAAM,OAAO,CAAC,EAAE,YAAY,IAAI,KAAK,MAAM,MAAM,CAAC;AACtE,gBAAM,QAAQ,QAAQ,SAAS,MAAM;AACrC,gBAAM,QAAQ,MAAM,QAAQ,QAAQ,MAAM,EAAE;AAC5C,cAAI,MAAM,UAAU,MAAM,SAAS,MAAM,GAAG;AAC1C,kBAAM,WAAW,IAAI,KAAK,KAAK,EAAE,QAAQ;AACzC,gBAAI,MAAM,QAAQ,GAAG;AACnB,sBAAQ;AAAA,gBACN,gBAAgB,KAAK;AAAA,cACvB;AAAA,YACF;AACA,mBAAO,CAAC,UAAU,KAAK;AAAA,UACzB;AACA,iBAAO,CAAC,OAAO,KAAK;AAAA,QACtB,OAAO;AACL,kBAAQ;AAAA,YACN,sDAAsD,KAAK,KAAK;AAAA,UAClE;AAAA,QACF;AAAA,MACF,SAAS,OAAY;AACnB,gBAAQ,MAAM,yBAAyB,KAAK,KAAK,aAAa;AAAA,MAChE;AACA,aAAO;AAAA,IACT;AAAA;AAAA,EAEa,SAA2B;AAAA;AACtC,aAAO;AAAA,IACT;AAAA;AACF;;;AC3CO,IAAe,aAAf,cAAkC,WAAW;AAAA,EAUlD,YACE,aACA,UACA,cACA;AACA,UAAM;AACN,SAAK,cAAc;AACnB,SAAK,WAAW;AAChB,SAAK,eAAe;AAAA,EACtB;AAAA,EAEM,WAA6B;AAAA;AACjC,aAAO;AAAA,IACT;AAAA;AAAA,EAEgB,SAA2B;AAAA;AACzC,UAAI;AACF,cAAM,WACH,KAAK,QAAQ,UAAa,OAAO,KAAK,QAAQ,cAC9C,KAAK,aAAa,UAAa,OAAO,KAAK,aAAa,cACxD,KAAK,SAAS,UAAa,OAAO,KAAK,SAAS,cAChD,KAAK,WAAW,UAAa,OAAO,KAAK,WAAW;AACvD,YAAI,CAAC,SAAS;AACZ,gBAAM,IAAI,MAAM,gDAAgD;AAAA,QAClE;AACA,eAAO;AAAA,MACT,SAAS,OAAY;AACnB,cAAM,MAAM;AAAA,MACd;AAAA,IACF;AAAA;AACF;;;AC9BO,IAAM,mBAAN,MAAM,0BAAyB,WAAW;AAAA,EAC/C,YACE,aACA,UACA,cACA;AACA,UAAM,aAAa,UAAU,YAAY;AAAA,EAC3C;AAAA,EAEa,WAA6B;AAAA;AAzB5C;AA0BI,UAAI,KAAK,eAAe,KAAK,cAAc;AACzC,cAAM,UAAU,KAAK,YAAY,WAC7B,eAAe,yBAAyB,KAAK,YAAY,QAAQ,IACjE;AACJ,YAAI,SAAS;AACX,gBAAM,SAAS,QAAQ,aAAa,KAAK,YAAY,SAAS,CAAC;AAC/D,cAAI,QAAQ;AACV,mBAAO;AAAA,UACT;AAAA,QACF;AACA,cAAM,aAAsB,MAAM,KAAK,YAAY,SAAS;AAC5D,YAAI,YAAY;AACd,gBAAM,CAAC,WAAW,KAAK,IAAI;AAC3B,cAAI,aAAa,KAAK,aAAa;AACnC,cAAI,SAAS,MAAM,SAAS,MAAM,KAAK,CAAC,MAAM,QAAQ,UAAU,GAAG;AACjE,yBAAa,IAAI,KAAK,UAAU,EAAE,QAAQ;AAC1C,gBAAI,MAAM,UAAU,GAAG;AACrB,sBAAQ;AAAA,gBACN,gBAAgB,UAAU;AAAA,cAC5B;AAAA,YACF;AAAA,UACF;AACA,mBAAQ,UAAK,aAAL,mBAAe,OAAO;AAAA,YAC5B,KAAK,SAAS;AACZ,qBAAO,cAAc;AAAA,YAEvB,KAAK,SAAS;AAAA,YACd,KAAK,SAAS;AACZ,qBAAO,cAAc;AAAA,YAEvB,KAAK,SAAS;AACZ,qBAAQ,YAAwB;AAAA,YAElC,KAAK,SAAS;AAAA,YACd,KAAK,SAAS;AACZ,qBAAQ,aAAyB;AAAA,YAEnC,KAAK,SAAS;AACZ,qBAAQ,YAAwB;AAAA,YAElC,KAAK,SAAS;AAAA,YACd,KAAK,SAAS;AACZ,qBAAQ,aAAyB;AAAA,YACnC,KAAK,SAAS;AACZ,qBACE,MAAM,QAAQ,UAAU,KACxB,CAAE,WAA0B,SAAS,SAAS;AAAA,YAElD,KAAK,SAAS;AACZ,qBAAO,kBAAiB,IAAI,WAAW,UAAU;AAAA,UACrD;AAAA,QACF;AAAA,MACF;AACA,aAAO;AAAA,IACT;AAAA;AAAA,EAEA,OAAe,IACb,WACA,YACS;AACT,UAAM,OAAO,OAAO;AACpB,UAAM,QACJ,OAAO,eAAe,WAAW,WAAW,YAAY,IAAI;AAC9D,YAAQ,OAAO;AAAA,MACb,KAAK;AACH,eAAO,SAAS;AAAA,MAClB,KAAK;AACH,eAAO,SAAS;AAAA,MAClB,KAAK;AACH,eAAO,SAAS;AAAA,MAClB,KAAK;AACH,eAAO,cAAc,QAAQ,SAAS;AAAA,MACxC,KAAK;AACH,eAAO,MAAM,QAAQ,SAAS;AAAA,MAChC,KAAK;AACH,eAAO,qBAAqB;AAAA,MAC9B,KAAK;AACH,eACE,cAAc,QACd,cAAc,UACd,cAAc,MACd,cAAc,KACd,cAAc;AAAA,MAElB;AACE,eAAO;AAAA,IACX;AAAA,EACF;AAAA,EAEa,SAA2B;AAAA;AACtC,YAAM,WACH,MAAM,8CAAM,eAAN,IAAa,MACpB,KAAK,uBAAuB,eAC5B,KAAK,oBAAoB,YACzB,KAAK,wBAAwB;AAC/B,UAAI,CAAC,SAAS;AACZ,cAAM,IAAI,MAAM,oCAAoC;AAAA,MACtD;AACA,aAAO;AAAA,IACT;AAAA;AACF;;;AC3HO,IAAM,qBAAN,MAAM,2BAA0B,WAAW;AAAA,EAIhD,YAAY,SAAiB;AAC3B,UAAM,MAAM,MAAM,IAAI;AACtB,SAAK,UAAU;AACf,SAAK,aAAa,CAAC;AAAA,EACrB;AAAA,EACO,cAAc,YAAwB;AAC3C,SAAK,WAAW,KAAK,UAAU;AAAA,EACjC;AAAA;AAAA,EAEM,WAA6B;AAAA;AACjC,cAAQ,KAAK,SAAS;AAAA,QACpB,KAAK;AACH,kBACE,MAAM,QAAQ;AAAA,YACZ,KAAK,WAAW,IAAI,CAAC,eAAe,WAAW,SAAS,CAAC;AAAA,UAC3D,GACA,MAAM,CAAC,WAAW,MAAM;AAAA,QAC5B,KAAK;AACH,kBACE,MAAM,QAAQ;AAAA,YACZ,KAAK,WAAW,IAAI,CAAC,eAAe,WAAW,SAAS,CAAC;AAAA,UAC3D,GACA,KAAK,CAAC,WAAW,MAAM;AAAA,QAC3B;AACE,iBAAO;AAAA,MACX;AAAA,IACF;AAAA;AAAA,EAEa,SAA2B;AAAA;AACtC,YAAM,WACH,MAAM,+CAAM,eAAN,IAAa,MACpB,KAAK,WACL,mBAAkB,SAAS,SAAS,KAAK,OAAO;AAClD,UAAI,CAAC,SAAS;AACZ,cAAM,IAAI,MAAM,wCAAwC,KAAK,OAAO,GAAG;AAAA,MACzE;AACA,aAAO;AAAA,IACT;AAAA;AACF;AA1Ca,mBACK,WAAqB,CAAC,OAAO,eAAe,MAAM,MAAM;AADnE,IAAM,oBAAN;;;ACCA,IAAM,kBAAN,cAA8B,OAAO;AAAA,EAM1C,YAAY,KAAa,SAAiB;AACxC,UAAM,KAAK,SAAS,WAAW;AANjC,oBAAuB;AACvB,sBAA+B,CAAC;AAAA,EAMhC;AAAA,EAEO,YAAY,UAAkB;AACnC,SAAK,WAAW;AAAA,EAClB;AAAA,EAEO,YAAY,UAAkB;AACnC,SAAK,WAAW;AAAA,EAClB;AAAA,EAEa,WAA6B;AAAA;AACxC,aAAO;AAAA,IACT;AAAA;AAAA,EAEa,SAA2B;AAAA;AACtC,aAAO;AAAA,IACT;AAAA;AACF;;;ACzBO,IAAM,cAAN,cAA0B,OAAO;AAAA,EAMtC,YAAY,KAAa,SAAiB;AACxC,UAAM,KAAK,SAAS,OAAO;AAN7B,oBAAmB;AACnB,sBAA+B,CAAC;AAAA,EAMhC;AAAA,EAEa,WAA6B;AAAA;AACxC,aAAO;AAAA,IACT;AAAA;AAAA,EAEa,SAA2B;AAAA;AACtC,aAAO;AAAA,IACT;AAAA;AACF;;;AClBO,IAAM,YAAN,cAAwB,OAAO;AAAA,EAIpC,YAAY,KAAa,SAAiB;AACxC,UAAM,KAAK,SAAS,KAAK;AAJ3B,oBAAiB;AACjB,sBAA+B,CAAC;AAAA,EAIhC;AAAA,EAEa,WAA6B;AAAA;AACxC,aAAO;AAAA,IACT;AAAA;AAAA,EAEa,SAA2B;AAAA;AACtC,aAAO;AAAA,IACT;AAAA;AACF;;;ACNO,IAAM,OAAO,CAClB,UACA,SACA,aAAuB,CAAC,GACxB,OAAiB,MACR;AACT,MAAI,UAAU;AAEZ,QAAI,OAAO,OAAO,KAAK,OAAO;AAE9B,QAAI,SAAS,aAAc;AACzB,aAAO,KAAK,OAAO,CAAC,QAAQ;AAC1B,cAAM,WAAW,WAAW,SAAS,GAAG;AACxC,eAAO,SAAS,kBAAmB,CAAC,WAAW;AAAA,MACjD,CAAC;AAAA,IACH;AAEA,SAAK,QAAQ,CAAC,QAAgB;AAE5B,UAAI,OAAO,SAAS,GAAG,MAAM,YAAY;AACvC,iBAAS,GAAG,IAAI,QAAQ,GAAG;AAAA,MAC7B;AAAA,IACF,CAAC;AAAA,EACH;AACF;AAEO,IAAM,cAAc,CAAC,UAAsC;AAChE,QAAM,IAAI,MAAM,MAAM,GAAG;AACzB,QAAM,IAAI,EAAE,IAAI;AAChB,SAAO,MAAM,KAAK,EAAE,IAAI,IAAI;AAC9B;AAiBO,IAAM,UAAU,CAAC,KAAU,SAAkC;AAClE,SACE,QACA,KACG,MAAM,GAAG,EACT;AAAA,IACC,CAAC,KAAK,QAAS,OAAO,IAAI,GAAG,MAAM,SAAY,IAAI,GAAG,IAAI;AAAA,IAC1D;AAAA,EACF;AAEN;AAeO,IAAM,sBAAsB,CACjC,sBAC2B;AAC3B,QAAM,gBACJ;AACF,SAAO,cAAc,KAAK,iBAAiB;AAC7C;AAEO,IAAM,mBAAmB,CAC9B,mBACA,UACW;AACX,MAAI,CAAC,OAAO;AACV,YAAQ,oBAAoB,iBAAiB;AAAA,EAC/C;AACA,MAAI,CAAC,OAAO;AACV,UAAM,IAAI,MAAM,qCAAqC,iBAAiB,EAAE;AAAA,EAC1E;AACA,QAAM,CAAC,EAAE,OAAO,QAAQ,OAAO,MAAM,OAAO,SAAS,OAAO,IAAI,MAAM;AAAA,IACpE,CAAC,MAAO,IAAI,WAAW,CAAC,IAAI;AAAA,EAC9B;AACA,MAAI,oBAAoB;AACxB,MAAI,OAAO;AACT,yBAAqB,QAAQ,SAAS,KAAK,KAAK,KAAK;AAAA,EACvD;AACA,MAAI,QAAQ;AACV,yBAAqB,SAAS,QAAQ,KAAK,KAAK,KAAK;AAAA,EACvD;AACA,MAAI,OAAO;AACT,yBAAqB,QAAQ,IAAI,KAAK,KAAK,KAAK;AAAA,EAClD;AACA,MAAI,MAAM;AACR,yBAAqB,OAAO,KAAK,KAAK,KAAK;AAAA,EAC7C;AACA,MAAI,OAAO;AACT,yBAAqB,QAAQ,KAAK,KAAK;AAAA,EACzC;AACA,MAAI,SAAS;AACX,yBAAqB,UAAU,KAAK;AAAA,EACtC;AACA,MAAI,SAAS;AACX,yBAAqB,UAAU;AAAA,EACjC;AACA,MAAI,sBAAsB,GAAG;AAC3B,UAAM,IAAI;AAAA,MACR,0CAA0C,iBAAiB;AAAA,IAC7D;AAAA,EACF;AACA,SAAO;AACT;;;AClIO,IAAM,QAAN,cAAoB,WAAW;AAAA,EAGpC,YAAY,KAAa;AACvB,UAAM;AACN,SAAK,MAAM;AAAA,EACb;AAAA,EACa,SAA2B;AAAA;AACtC,aAAO;AAAA,IACT;AAAA;AACF;;;ACoBO,IAAM,sBAAN,MAAM,oBAAmB;AAAA,EAI9B,cAAc;AACZ,SAAK,SAAS;AACd,WAAO,UAAU,OAAO;AAAA,MACtB;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,IACF,CAAC;AACD,WAAO,UAAU,QAAQ,CAAC,SAAS,CAAC;AACpC,WAAO,UAAU,WAAW,CAAC,WAAW,CAAC;AACzC,WAAO,UAAU,YAAY,CAAC,QAAQ,MAAM,CAAC;AAAA,EAC/C;AAAA,EAEA,OAAc,cAAkC;AAC9C,QAAI,CAAC,oBAAmB,UAAU;AAChC,0BAAmB,WAAW,IAAI,oBAAmB;AAAA,IACvD;AACA,WAAO,oBAAmB;AAAA,EAC5B;AAAA,EAgBA,OAAe,cACb,SACA,QACA,MACgB;AAChB,UAAM,OAAO,IAAI,eAAe;AAChC,SAAK,UAAU,MAAM;AACrB,WAAO,cAAc,IAAI;AACzB,WAAO;AAAA,EACT;AAAA,EAEA,OAAe,eACb,SACA,QACA,MACiB;AACjB,UAAM,OAAO,IAAI,gBAAgB;AACjC,SAAK,UAAU,MAAM;AACrB,WAAO,eAAe,IAAI;AAC1B,WAAO;AAAA,EACT;AAAA,EAEA,OAAe,cACb,SACA,QACA,MACU;AACV,UAAM,EAAE,UAAU,SAAS,IAAI;AAC/B,UAAM,OAAO,IAAI;AAAA,MACf,YAAY,IAAI,MAAM,QAAQ;AAAA,MAC9B,YAAY,IAAI,MAAM,QAAQ;AAAA,IAChC;AACA,SAAK,UAAU,MAAM;AACrB,SAAK,QAAQ;AACb,WAAO,QAAQ,IAAI;AACnB,WAAO;AAAA,EACT;AAAA,EAEA,OAAe,QACb,SACA,QACA,MACA;AACA,UAAM,EAAE,UAAU,SAAS,IAAI;AAC/B,UAAM,OAAO,IAAI;AAAA,MACf,YAAY,IAAI,MAAM,QAAQ;AAAA,MAC9B,YAAY,IAAI,MAAM,QAAQ;AAAA,IAChC;AACA,SAAK,UAAU,MAAM;AACrB,SAAK,QAAQ;AACb,WAAO,QAAQ,IAAI;AACnB,WAAO;AAAA,EACT;AAAA,EAEA,OAAe,UACb,SACA,QACA,MACA,WACQ;AACR,QAAI;AACF,YAAM,QAAQ;AAAA,QACZ,OAAO,YAAY,WAAW,QAAQ,QAAQ;AAAA,MAChD;AACA,UAAI,CAAC,OAAO;AACV,cAAM,IAAI,MAAM,gBAAgB;AAAA,MAClC;AAEA,YAAM,SAAS,oBAAmB,UAAU,QAAQ,OAAO,IAAI;AAC/D,aAAO,WAAW,6BAAM;AACxB,aAAO,UAAU,MAAM;AACvB,UAAI,CAAC,WAAW;AACd,eAAO,UAAU,MAAM;AAAA,MACzB,OAAO;AACL,eAAO,UAAU,MAAM;AAAA,MACzB;AACA,aAAO;AAAA,IACT,SAAS,OAAY;AACnB,YAAM,IAAI,MAAM,qBAAqB;AAAA,IACvC;AAAA,EACF;AAAA,EAEA,OAAe,UACb,SACA,QACA,MACM;AACN,UAAM,QAAQ,IAAI,MAAM,OAAO;AAC/B,UAAM,UAAU,MAAM;AACtB,WAAO,UAAU,KAAK;AAAA,EACxB;AAAA,EAEA,OAAe,cACb,SACA,QACA,MACY;AACZ,UAAM;AAAA,MACJ;AAAA,MACA,UAAU;AAAA,MACV;AAAA,MACA,YAAY;AAAA,IACd,IAAI;AAEJ,QAAI,gBAAgB;AACpB,UAAM,QAAQ,oBAAoB,YAAY;AAC9C,QAAI,OAAO;AAET,sBAAgB,iBAAiB,YAAY;AAAA,IAC/C;AACA,UAAM,WAAW,aAAa,YAAY,SAAS;AACnD,UAAM,aACH,eACC,YACA,kBAAkB,UAClB,IAAI;AAAA,OACD,MAAM;AACL,cAAM,eAAe,IAAI,YAAY,WAAW;AAChD,qBAAa,WAAW,6BAAM;AAC9B,eAAO;AAAA,MACT,GAAG;AAAA,MACH,IAAI,SAAS,QAAQ;AAAA,MACrB,oBAAmB,UAAU,cAAc,aAAa;AAAA,IAC1D,KACD,YACC,MAAM,QAAQ,WAAW,KACzB,YAAY,SAAS,KACrB,IAAI,kBAAkB,QAAQ;AAClC;AAAA,MACE;AAAA,MACA;AAAA,MACA,CAAC,cAAc,eAAe,YAAY,cAAc;AAAA;AAAA,IAE1D;AACA,QAAI,YAAY;AACd,iBAAW,UAAU,MAAM;AAAA,IAC7B;AACA,WAAO,cAAc,cAAc,OAAO;AAC1C,WAAO;AAAA,EACT;AAAA,EAEA,OAAe,cACb,SACA,QACA,MACY;AACZ,WAAO,oBAAmB,cAAc,SAAS,QAAQ,IAAI;AAAA,EAC/D;AAAA,EAEA,OAAe,UACb,SACA,QACA,MACU;AACV,UAAM,EAAE,UAAU,SAAS,IAAI;AAC/B,UAAM,OAAO,IAAI;AAAA,MACf,YAAY,IAAI,MAAM,QAAQ;AAAA,MAC9B,YAAY,IAAI,MAAM,QAAQ;AAAA,IAChC;AACA,SAAK,UAAU,MAAM;AACrB,SAAK,QAAQ;AACb,WAAO,UAAU,IAAI;AACrB,WAAO;AAAA,EACT;AAAA,EAEA,OAAe,eACb,SACA,QACA,MACU;AACV,UAAM,EAAE,UAAU,SAAS,IAAI;AAC/B,UAAM,OAAO,IAAI;AAAA,MACf,YAAY,IAAI,MAAM,QAAQ;AAAA,MAC9B,YAAY,IAAI,MAAM,QAAQ;AAAA,IAChC;AACA;AAAA,MACE;AAAA,MACA;AAAA,MACA,CAAC,oBAAoB,mBAAmB;AAAA;AAAA,IAE1C;AACA,SAAK,UAAU,MAAM;AACrB,SAAK,QAAQ;AACb,WAAO,eAAe,IAAI;AAC1B,WAAO;AAAA,EACT;AAAA,EAEQ,iBAAiB,MAAiB;AACxC,UAAM,UAAU,KAAK,UAAU;AAC/B,YAAQ,KAAK,OAAO,GAAG;AAAA,MACrB,KAAK;AACH,aAAK,SAAS,IAAI,YAAY,KAAK,KAAK,OAAO;AAC/C;AAAA,MACF,KAAK;AACH,aAAK,SAAS,IAAI,UAAU,KAAK,KAAK,OAAO;AAC7C;AAAA,MACF,KAAK;AACH,cAAM,SAAS,IAAI,gBAAgB,KAAK,KAAK,OAAO;AACpD,eAAO,YAAY,KAAK,YAAY,IAAI,MAAM,KAAK,QAAQ,CAAC;AAC5D,eAAO,YAAY,KAAK,YAAY,IAAI,MAAM,KAAK,QAAQ,CAAC;AAC5D,aAAK,SAAS;AACd;AAAA,MACF;AACE,cAAM,IAAI,MAAM,wBAAwB,KAAK,OAAO,CAAC,EAAE;AAAA,IAC3D;AAAA,EACF;AAAA,EAEO,cAAc,MAA0B;AAC7C,QAAI;AACF,WAAK,iBAAiB,IAAI;AAC1B,WAAK,SAAS,MAAM,KAAK,MAAM;AAC/B,aAAO,KAAK;AAAA,IACd,SAAS,OAAY;AACnB,cAAQ,MAAM,MAAM,OAAO;AAAA,IAC7B;AACA,WAAO;AAAA,EACT;AAAA,EAEO,SAAS,MAAW,QAAmB;AAC5C,UAAM,cAAc,CAClB,UACA,SACA,YAAqB,UAClB;AACH,UAAI;AACF,YAAI,SAAS;AACX,gBAAM,QACJ,oBAAmB,cAAc,QAAQ,MACvC,oBAAmB,cAAc,QAAQ,EAAE,UAAU,KACrD,oBAAmB,cAAc,QAAQ;AAAA,YACvC;AAAA,YACA;AAAA,YACA,KAAK;AAAA,YACL;AAAA,UACF,KACA,oBAAmB,cAAc,QAAQ;AAAA,YACvC;AAAA,YACA;AAAA,YACA,KAAK;AAAA,UACP;AACJ,cAAI,OAAO,YAAY,UAAU;AAC/B,gBAAI,OAAO;AACT,mBAAK,SAAS,SAAS,KAAK;AAAA,YAC9B,WAAW,aAAa,YAAY;AAClC,sBAAQ;AAAA,gBACN,sCAAsC,QAAQ;AAAA,cAChD;AAAA,YACF;AAAA,UACF;AAAA,QACF;AAAA,MACF,SAAS,OAAY;AACnB,gBAAQ,MAAM,MAAM,OAAO;AAAA,MAC7B;AAAA,IACF;AACA,eAAW,YAAY,MAAM;AAC3B,YAAM,UAAU,KAAK,QAAQ;AAC7B,UAAI,MAAM,QAAQ,OAAO,GAAG;AAC1B,gBAAQ,QAAQ,CAAC,SAAc;AAC7B,sBAAY,UAAU,MAAM,IAAI;AAAA,QAClC,CAAC;AAAA,MACH,OAAO;AACL,oBAAY,UAAU,OAAO;AAAA,MAC/B;AAAA,IACF;AAAA,EACF;AAAA,EAEA,OAAc,UACZ,SACG,MACA;AA7XP;AA8XI,UAAM,WAAU,gBAAK,aAAL,mBAAe,WAAf,mBAAwB;AACxC,UAAM,iBAAiB,MAAM,QAAQ,OAAO;AAC5C,QAAI,CAAC,gBAAgB;AACnB,aAAO,QAAQ,UAAU,MAAM,IAAI;AAAA,IACrC;AACA,UAAM,aAAuB,CAAC;AAC9B,WAAO,KAAK,IAAI,CAAC,QAAQ;AACvB,UAAI,OAAO,QAAQ,YAAY,kBAAkB,KAAK,GAAG,GAAG;AAC1D,cAAM,CAAC,QAAQ,KAAK,IAAI,IAAI,MAAM,GAAG;AACrC,cAAM,MAAM,QAAQ,KAAK,CAAC,MAAM,EAAE,MAAM,CAAC;AACzC,YAAI,KAAK;AACP,qBAAW,KAAK,MAAM;AACtB,iBAAO;AAAA,QACT;AAAA,MACF;AACA,aAAO;AAAA,IACT,CAAC;AACD,UAAM,WAAW,QAAQ,UAAU,MAAM,IAAI;AAC7C,IAAC,SAA+C,aAAa;AAC7D,WAAO;AAAA,EACT;AACF;AAlXa,oBAiEa,gBACtB;AAAA,EACE,YAAY,oBAAmB;AAAA,EAC/B,aAAa,oBAAmB;AAAA,EAChC,YAAY,oBAAmB;AAAA,EAC/B,MAAM,oBAAmB;AAAA,EACzB,QAAQ,oBAAmB;AAAA,EAC3B,QAAQ,oBAAmB;AAAA,EAC3B,YAAY,oBAAmB;AAAA,EAC/B,YAAY,oBAAmB;AAAA,EAC/B,aAAa,oBAAmB;AAAA,EAChC,QAAQ,oBAAmB;AAC7B;AA7EG,IAAM,qBAAN;AAoXP,IAAO,6BAAQ,mBAAmB,YAAY;;;ACvXvC,IAAM,kBAAN,MAAM,iBAAgB;AAAA,EA+B3B,cAAc;AA3Bd,SAAiB,UAAmB;AAAA,MAClC,QAAQ;AAAA,QACN,MAAM,KAAK,WAAW,KAAK,IAAI;AAAA,QAC/B,MAAM;AAAA,MACR;AAAA,MACA,YAAY;AAAA,QACV,MAAM,KAAK,eAAe,KAAK,IAAI;AAAA,QACnC,MAAM;AAAA,MACR;AAAA,MACA,aAAa;AAAA,QACX,MAAM,KAAK,gBAAgB,KAAK,IAAI;AAAA,QACpC,MAAM;AAAA,MACR;AAAA,MACA,UAAU;AAAA,QACR,MAAM,KAAK,iBAAiB,KAAK,IAAI;AAAA,QACrC,MAAM;AAAA,MACR;AAAA,MACA,UAAU;AAAA,QACR,MAAM,KAAK,gBAAgB,KAAK,IAAI;AAAA,QACpC,MAAM;AAAA,MACR;AAAA,MACA,YAAY;AAAA,QACV,MAAM,KAAK,WAAW,KAAK,IAAI;AAAA,QAC/B,MAAM;AAAA,MACR;AAAA,IACF;AAkIA,SAAQ,OAAO,CAAC,YAAwB,YAA2B;AACjE,iBAAW,OAAO,SAAS;AACzB,YAAI,QAAQ,eAAe,GAAG,GAAG;AAC/B,gBAAM,SAAiB,KAAK,QAAQ,GAAG;AACvC,cACE,OAAO,OAAO,SAAS,cACvB,sBAAsB,OAAO,MAC7B;AACA,kBAAM,WAAW,OAAO,KAAK,YAAY,OAAO;AAChD,gBAAI,UAAU;AACZ,qBAAO;AAAA,YACT;AAAA,UACF;AAAA,QACF;AAAA,MACF;AACA,aAAO;AAAA,IACT;AA/IE,SAAK,WAAW,CAAC;AAAA,EACnB;AAAA,EAEA,OAAc,cAA+B;AAC3C,QAAI,CAAC,iBAAgB,UAAU;AAC7B,uBAAgB,WAAW,IAAI,iBAAgB;AAAA,IACjD;AACA,WAAO,iBAAgB;AAAA,EACzB;AAAA,EAEQ,WAAW,YAAwB,SAAwB;AACjE,QAAI,sBAAsB,OAAO;AAC/B,YAAM,MAAO,WAAqB;AAClC,YAAM,SAAS,mCAAS;AACxB,UAAI,OAAO,WAAW,UAAU;AAC9B,eAAO,OAAO,OAAO,QAAQ,OAAO;AAAA,MACtC;AACA,aAAO,QAAQ;AAAA,IACjB;AACA,WAAO;AAAA,EACT;AAAA,EAEQ,cACN,WACA,YACA,SACS;AACT,UAAM,UAA6B,QAAQ,SAAS;AACpD,QACG,WAAW,sBAAsB,YAClC,sBAAsB,kBACtB,sBAAsB,mBACtB,sBAAsB,iBACtB;AACA,YAAM,MAAM,QAAQ,YAAY,QAAQ,OAAO;AAC/C,aAAO,OAAO,QAAQ,QAAQ;AAAA,IAChC;AACA,WAAO;AAAA,EACT;AAAA,EAEQ,gBAAgB,YAAwB,SAAwB;AACtE,WAAO,KAAK,cAAc,YAAY,YAAY,OAAO;AAAA,EAC3D;AAAA,EAEQ,iBAAiB,YAAwB,SAAwB;AACvE,WAAO,KAAK,cAAc,YAAY,YAAY,OAAO;AAAA,EAC3D;AAAA,EAEQ,eAAe,YAAwB,SAAwB;AACrE,YAAQ,IAAI,gBAAgB;AAC5B,WAAO;AAAA,EACT;AAAA,EAEQ,gBAAgB,YAAwB,SAAwB;AACtE,YAAQ,IAAI,iBAAiB;AAC7B,WAAO;AAAA,EACT;AAAA,EAEQ,WAAW,YAAwB,SAAwB;AACjE,UAAM,aAAa,sBAAsB;AACzC,QAAI,YAAY;AACd,YAAM,YACJ,mCAAS,SAAQ,QACf,WAAwB,UAAU,iBACjC,WAAwB,UAAU;AACvC,aAAO;AAAA,IACT;AACA,WAAO;AAAA,EACT;AAAA,EAEO,gBAAsB;AAC3B,SAAK,WAAW,CAAC;AAAA,EACnB;AAAA,EAEO,UACL,QACA,aACA,cACM;AACN,QAAI,aAAa;AACf,aAAO,cAAc,YAAY;AAAA,IACnC;AACA,QAAI,cAAc;AAChB,aAAO,mBAAmB,aAAa;AAAA,IACzC;AACA,SAAK,SAAS,KAAK,MAAM;AAAA,EAC3B;AAAA,EAEO,UACL,QACA,aACA,cACM;AACN,SAAK,cAAc;AACnB,SAAK,UAAU,QAAQ,aAAa,YAAY;AAAA,EAClD;AAAA,EAEO,cAAoB;AACzB,SAAK,SAAS,QAAQ,CAAC,WAAmB;AACxC,aAAO,MAAM;AAAA,IACf,CAAC;AAAA,EACH;AAAA,EAEQ,kBAAkB,SAAoB;AAC5C,QAAI;AACF,UAAI,CAAC,KAAK,SAAS,QAAQ;AACzB,cAAM,IAAI;AAAA,UACR;AAAA,QACF;AAAA,MACF;AACA,WAAK,SAAS,QAAQ,CAAC,WAAmB;AACxC,cAAM,UAAU,eAAe;AAAA,UAC7B,OAAO;AAAA,QACT;AACA,YAAI,CAAC,SAAS;AACZ,gBAAM,IAAI;AAAA,YACR;AAAA,UACF;AAAA,QACF,OAAO;AACL,kBAAQ,kBAAkB,OAAO;AAAA,QACnC;AAAA,MACF,CAAC;AAAA,IACH,SAAS,OAAY;AACnB,cAAQ,KAAK,eAAe,MAAM,OAAO,UAAU;AAAA,IACrD;AAAA,EACF;AAAA,EAoBc,QAAQ,SAAqC;AAAA;AACzD,UAAI,KAAK,SAAS,QAAQ;AACxB,cAAM,eACJ,MAAM,QAAQ;AAAA,UACZ,KAAK,SAAS;AAAA,YACZ,CAAO,WAAgB;AACrB,2BAAM,OAAO,QAAQ,KAAK,KAAK,KAAK,IAAI,GAAG,OAAO;AAAA;AAAA,UACtD;AAAA,QACF,GACA,KAAK;AACP,eAAO;AAAA,MACT;AACA,aAAO,CAAC;AAAA,IACV;AAAA;AAAA,EAEA,OAAe,mBAAmB,UAAqC;AACrE,UAAM,UAA6B;AAAA,MACjC,cAAc;AAAA,MACd,SAAS;AAAA,MACT,UAAU;AAAA,IACZ;AACA,WAAO;AAAA,EACT;AAAA,EAEA,OAAe,mBAAmB,UAAqC;AACrE,UAAM,UAA6B;AAAA,MACjC,cAAc;AAAA,MACd,SAAS;AAAA,MACT,UAAU;AAAA,IACZ;AACA,WAAO;AAAA,EACT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQa,sBACX,QACA,WAAoB,MACD;AAAA;AACnB,YAAM,UAAoB,MAAM,KAAK,QAAQ;AAAA,QAC3C;AAAA,MACF,CAAC;AACD,YAAM,iBAAqD,CAAC;AAC5D,cAAQ,QAAQ,CAACC,YAAkB;AACjC,cAAM,SAAqBA,QAAO,UAAU;AAC5C,cAAM,SAAiB,OAAO;AAC9B,YAAI,CAAC,eAAe,OAAO,KAAK,GAAG;AACjC,yBAAe,OAAO,KAAK,IAAI,CAAC;AAAA,QAClC;AACA,uBAAe,OAAO,KAAK,EAAE,KAAK,OAAO,SAAS,CAAC;AAAA,MACrD,CAAC;AACD,YAAMC,WAAwB,CAAC;AAC/B,iBAAW,CAAC,QAAQ,QAAQ,KAAK,OAAO,QAAQ,cAAc,GAAG;AAC/D,cAAM,UAAU,MAAM,QAAQ,IAAI,QAAQ;AAC1C,cAAM,gBAAgB,QAAQ,MAAM,CAAC,WAAW,MAAM;AACtD,YAAI,eAAe;AACjB,UAAAA,SAAQ,KAAK,MAAoB;AAAA,QACnC;AAAA,MACF;AACA,aAAO,WAAW,OAAO,YAAYA,QAAO,IAAIA;AAAA,IAClD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOa,oBAAoB,QAAmC;AAAA;AAClE,YAAM,UAAoB,MAAM,KAAK,QAAQ;AAAA,QAC3C;AAAA,MACF,CAAC;AAED,YAAM,eAA4B,oBAAI,IAAY;AAClD,cAAQ,QAAQ,CAACD,YAAkB;AACjC,cAAM,SAAqBA,QAAO,UAAU;AAC5C,cAAM,cAA4B,OAAO,eAAe,KAAK,CAAC;AAC9D,oBAAY,QAAQ,CAAC,eAA2B;AAC9C,gBAAM,cAAc,WAAW;AAC/B,cAAI,aAAa;AACf,kBAAM,QAAQ,YAAY,SAAS;AACnC,yBAAa,IAAI,KAAK;AAAA,UACxB;AAAA,QACF,CAAC;AAAA,MACH,CAAC;AACD,aAAO,MAAM,KAAK,YAAY;AAAA,IAChC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EASa,oBAEX,YACA,QACA,gBAAyB,OACP;AAAA;AAClB,YAAM,UAAoB,MAAM,KAAK,QAAQ;AAAA,QAC3C;AAAA,MACF,CAAC;AACD,YAAM,UAAU,MAAM,QAAQ;AAAA,QAC5B,CAAO,SAA6BA,YAAkB;AACpD,gBAAM,MAAM,MAAM;AAClB,gBAAM,SAAqBA,QAAO,UAAU;AAC5C,gBAAM,SAAiB,OAAO;AAE9B,kBAAQ,MAAM,OAAO,SAAS,UAAU,KACpC,IAAI,OAAO,MAAM,OAAO,SAAS,CAAC,IAClC;AAAA,QACN;AAAA,QACA,QAAQ,QAAQ,CAAC,CAAC;AAAA,MACpB;AACA,aAAO,QAAQ,SAAS,QAAQ,MAAM,CAAC,WAAW,MAAM,IAAI;AAAA,IAC9D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQa,6BACX,MACA,gBAAyB,OACP;AAAA;AAClB,YAAME,gBAAe,IAAI,mBAAmB;AAC5C,MAAAA,cAAa,cAAc,IAAI;AAC/B,YAAMC,aAAY,IAAI,iBAAgB;AACtC,UAAID,cAAa,QAAQ;AACvB,QAAAC,WAAU,UAAUD,cAAa,MAAM;AAAA,MACzC;AACA,YAAM,UAAoB,MAAMC,WAAU,QAAQ;AAAA,QAChD,QAAQ,EAAE,KAAK,IAAI,KAAK,KAAK;AAAA,MAC/B,CAAC;AACD,YAAM,iBAAqC,QAAQ;AAAA,QACjD,CAAO,WAAkB;AACvB,gBAAM,SAAqB,OAAO,UAAU;AAC5C,gBAAM,aAAc,OAAO,OAAkB;AAC7C,iBAAO,OAAO,MACV,KAAK,oBAAoB,YAAY,OAAO,GAAG,IAC/C;AAAA,QACN;AAAA,MACF;AACA,YAAM,UAAU,MAAM,QAAQ,IAAI,cAAc;AAChD,aAAO,QAAQ,SAAS,QAAQ,MAAM,CAAC,WAAW,MAAM,IAAI;AAAA,IAC9D;AAAA;AAAA,EAEa,YAAiC;AAAA;AAC5C,aAAQ,MAAM,KAAK,QAAQ;AAAA,QACzB,eAAe;AAAA,MACjB,CAAC;AAAA,IACH;AAAA;AAAA,EAEa,mBACX,QACA,YAAqB,OACA;AAAA;AACrB,YAAM,UAAoB,MAAM,KAAK,QAAQ,EAAE,OAAO,CAAC;AACvD,YAAM,SAAS,MAAM,QAAQ;AAAA,QAC3B,CAAC,YAAiCH,YAChC,WAAW,KAAK,CAAO,QAAoB;AACzC,gBAAM,SAAqBA,QAAO,UAAU;AAC5C,cAAI,UAAU,kBAAkB,UAAU;AACxC,kBAAM,OAAiB;AACvB,kBAAM,cAAc,CAAC,cAAc,MAAM,KAAK,SAAS;AACvD,gBAAI,aAAa;AACf,qBAAO,CAAC,GAAG,KAAK,IAAI;AAAA,YACtB;AAAA,UACF;AACA,iBAAO;AAAA,QACT,EAAC;AAAA,QACH,QAAQ,QAAQ,CAAC,CAAC;AAAA,MACpB;AACA,aAAO;AAAA,IACT;AAAA;AAAA,EAEa,aACX,QACA,QACA,YAAqB,OACA;AAAA;AACrB,YAAM,SAAqB,MAAM,KAAK,mBAAmB,QAAQ,SAAS;AAC1E,YAAM,iBAA6B,CAAC;AAEpC,YAAM,qBAAqB,OAAO,IAAI,CAAO,SAAmB;AAC9D,cAAM,aAAa,KAAK;AACxB,YAAI,WAAW,UAAU,QAAQ;AAC/B,gBAAM,cAAc,MAAM,KAAK,SAAS;AACxC,cAAI,aAAa;AACf,2BAAe,KAAK,IAAI;AAAA,UAC1B;AAAA,QACF;AAAA,MACF,EAAC;AACD,YAAM,QAAQ,IAAI,kBAAkB;AACpC,aAAO;AAAA,IACT;AAAA;AAAA,EAEa,kBAAkB,UAAuC;AAAA;AACpE,YAAM,UAAU,iBAAgB,mBAAmB,QAAQ;AAC3D,aAAQ,MAAM,KAAK,QAAQ;AAAA,QACzB,UAAU;AAAA,MACZ,CAAC;AAAA,IACH;AAAA;AAAA,EAEa,iBAAiB,UAAkC;AAAA;AAC9D,YAAM,UAAU,iBAAgB,mBAAmB,QAAQ;AAC3D,aAAQ,MAAM,KAAK,QAAQ;AAAA,QACzB,UAAU;AAAA,MACZ,CAAC;AAAA,IACH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQa,cACX,UACA,gBAAyB,OACP;AAAA;AAClB,WAAK,kBAAkB,EAAE,SAAS,CAAC;AACnC,YAAM,UAAU,iBAAgB,mBAAmB,QAAQ;AAC3D,YAAM,WAA0B,MAAM,KAAK,QAAQ;AAAA,QACjD,UAAU;AAAA;AAAA;AAAA;AAAA,MAIZ,CAAC;AACD,aAAO,KAAK,WAAW,UAAU,aAAa;AAAA,IAChD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOa,yBACX,UACA,gBAAyB,OACP;AAAA;AAOlB,WAAK,kBAAkB,EAAE,SAAS,CAAC;AACnC,YAAM,WAAyB,MAAM,KAAK,QAAQ;AAAA,QAChD,YAAY;AAAA,UACV,mBAAmB,CAAC,MAAM;AAAA,QAC5B;AAAA,MACF,CAAC;AACD,eAAS,OAAO,CAAC,WAAW;AAC1B,cAAM,QAA4B,OAAoB;AACtD,eAAO,EAAC,+BAAO;AAAA,MACjB,CAAC;AACD,aAAO,KAAK,WAAW,UAAU,aAAa;AAAA,IAChD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQc,WACZ,UACA,gBAAyB,OACP;AAAA;AAClB,YAAM,UAAU,MAAM,SAAS;AAAA,QAC7B,CAAO,SAA6B,WAAuB;AACzD,gBAAM,MAAM,MAAM;AAClB,cAAI,kBAAkB,UAAU;AAC9B,mBAAO,IAAI,OAAO,MAAO,OAAoB,SAAS,CAAC;AAAA,UACzD;AACA,iBAAO;AAAA,QACT;AAAA,QACA,QAAQ,QAAQ,CAAC,CAAC;AAAA,MACpB;AACA,aAAO,QAAQ,SAAS,QAAQ,MAAM,CAAC,WAAW,MAAM,IAAI;AAAA,IAC9D;AAAA;AAAA;AAGF;AAEA,IAAO,0BAAQ,gBAAgB,YAAY;;;AC/epC,IAAM,YAA6B;AACnC,IAAM,eAAmC;","names":["randomUUID","randomUUID","target","actions","instanciator","evaluator"]}