{"version":3,"sources":["../src/index.ts","../src/PolicyEvaluator.ts","../src/PolicyValidator.ts","../src/models/Action.ts","../src/models/Asset.ts","../src/models/Operator.ts","../src/models/RightOperand.ts","../src/models/LeftOperand.ts","../src/models/Constraint.ts","../src/models/AtomicConstraint.ts","../src/models/LogicalConstraint.ts","../src/PolicyExplorer.ts","../src/models/Policy.ts","../src/models/PolicyAgreement.ts","../src/models/PolicyOffer.ts","../src/models/PolicySet.ts","../src/models/Rule.ts","../src/models/RuleDuty.ts","../src/models/RulePermission.ts","../src/models/RuleProhibition.ts","../src/utils.ts","../src/PolicyInstanciator.ts"],"sourcesContent":["import policyEvaluator, { PolicyEvaluator } from './PolicyEvaluator';\r\nimport policyInstanciator, { PolicyInstanciator } from './PolicyInstanciator';\r\n\r\nexport const evaluator: PolicyEvaluator = policyEvaluator;\r\nexport const instanciator: PolicyInstanciator = policyInstanciator;\r\n","import { Policy } from './models/Policy';\r\n\r\nexport class PolicyEvaluator {\r\n  public static instance: PolicyEvaluator;\r\n\r\n  constructor() {}\r\n\r\n  public static getInstance(): PolicyEvaluator {\r\n    if (!PolicyEvaluator.instance) {\r\n      PolicyEvaluator.instance = new PolicyEvaluator();\r\n    }\r\n    return PolicyEvaluator.instance;\r\n  }\r\n\r\n  public setPolicy(policy: Policy): void {}\r\n  public setDataContext(data: any): void {}\r\n  public async visitTarget(target: string): Promise<void> {}\r\n}\r\n\r\nexport default PolicyEvaluator.getInstance();\r\n","export abstract class PolicyValidator {\r\n  protected abstract verify(): Promise<boolean>;\r\n  //\r\n  protected validate(depth: number = 0, validations: Promise<boolean>[]): void {\r\n    validations.push(\r\n      (async (): Promise<boolean> => {\r\n        try {\r\n          validations.push(this.verify());\r\n          for (const prop in this) {\r\n            if (this.hasOwnProperty(prop)) {\r\n              const value = (this as any)[prop];\r\n              if (Array.isArray(value)) {\r\n                for (const item of value) {\r\n                  if (\r\n                    item instanceof PolicyValidator &&\r\n                    typeof item.validate === 'function'\r\n                  ) {\r\n                    item.validate(depth + 2, validations);\r\n                  } else {\r\n                    throw new Error(\r\n                      `Invalid entry: ${JSON.stringify(item, null, 2)}`,\r\n                    );\r\n                  }\r\n                }\r\n              } else if (\r\n                value instanceof PolicyValidator &&\r\n                typeof value.validate === 'function'\r\n              ) {\r\n                value.validate(depth + 1, validations);\r\n              } else {\r\n                if (typeof value === 'object' && value !== null) {\r\n                  throw new Error(\r\n                    `Invalid entry: ${JSON.stringify(value, null, 2)}`,\r\n                  );\r\n                }\r\n              }\r\n            }\r\n          }\r\n          return true;\r\n        } catch (error: any) {\r\n          console.error(`[PolicyValidator] - \\x1b[31m${error.message}\\x1b[37m`);\r\n          return false;\r\n        }\r\n      })(),\r\n    );\r\n  }\r\n  //\r\n  public debug(depth: number = 0): void {\r\n    const indentation = '  '.repeat(depth);\r\n    console.log(\r\n      `\\x1b[93m${indentation}Class ${this.constructor.name}:\\x1b[37m`,\r\n    );\r\n\r\n    for (const prop in this) {\r\n      if (this.hasOwnProperty(prop)) {\r\n        const value = (this as any)[prop];\r\n\r\n        if (Array.isArray(value)) {\r\n          console.log(`${indentation}  ${prop}: \\x1b[36m[\\x1b[37m`);\r\n          for (const item of value) {\r\n            if (\r\n              item instanceof PolicyValidator &&\r\n              typeof item.debug === 'function'\r\n            ) {\r\n              item.debug(depth + 2);\r\n            } else {\r\n              console.log(\r\n                `\\x1b[31m${indentation}    ${JSON.stringify(item)}\\x1b[37m`,\r\n              );\r\n            }\r\n          }\r\n          console.log(`${indentation}  \\x1b[36m]\\x1b[37m`);\r\n        } else if (\r\n          value instanceof PolicyValidator &&\r\n          typeof value.debug === 'function'\r\n        ) {\r\n          value.debug(depth + 1);\r\n        } else {\r\n          if (typeof value === 'object' && value !== null) {\r\n            console.log(\r\n              `\\x1b[31m${indentation}  -${prop}: ${JSON.stringify(\r\n                value,\r\n              )}\\x1b[37m`,\r\n            );\r\n          } else {\r\n            console.log(\r\n              `${indentation}  \\x1b[32m-\\x1b[37m${prop}: \\x1b[90m${value}\\x1b[37m`,\r\n            );\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n","import { PolicyValidator } from '../PolicyValidator';\r\nimport { Constraint } from './Constraint';\r\n\r\nexport class Action extends PolicyValidator {\r\n  value: string;\r\n  refinement?: Constraint[];\r\n  includedIn: Action | null;\r\n  implies?: Action[];\r\n\r\n  constructor(value: string, includedIn: Action | null) {\r\n    super();\r\n    this.value = value;\r\n    this.includedIn = includedIn;\r\n  }\r\n\r\n  public addConstraint(constraint: Constraint) {\r\n    if (this.refinement === undefined) {\r\n      this.refinement = [];\r\n    }\r\n    this.refinement.push(constraint);\r\n  }\r\n  public async verify(): Promise<boolean> {\r\n    return true;\r\n  }\r\n}\r\n","import { PolicyValidator } from '../PolicyValidator';\r\nimport { AssetCollection } from './AssetCollection';\r\n\r\nexport class Asset extends PolicyValidator {\r\n  uid?: string;\r\n  partOf?: AssetCollection[];\r\n  hasPolicy?: string;\r\n\r\n  constructor(\r\n    target:\r\n      | string\r\n      | { uid?: string; partOf?: AssetCollection[]; hasPolicy?: string },\r\n  ) {\r\n    super();\r\n    if (typeof target === 'string') {\r\n      this.uid = target;\r\n    } else {\r\n      this.uid = target.uid;\r\n      this.partOf = target.partOf;\r\n      this.hasPolicy = target.hasPolicy;\r\n    }\r\n  }\r\n\r\n  public async verify(): Promise<boolean> {\r\n    return true;\r\n  }\r\n}\r\n","import { PolicyValidator } from '../PolicyValidator';\r\n\r\nexport class Operator extends PolicyValidator {\r\n  public static readonly EQ: string = 'eq';\r\n  public static readonly NEQ: string = 'neq';\r\n  public static readonly GT: string = 'gt';\r\n  public static readonly GEQ: string = 'gteq';\r\n  public static readonly LT: string = 'lt';\r\n  public static readonly LEQ: string = 'lteq';\r\n  public static readonly IN: string = 'isPartOf';\r\n  public static readonly HAS_PART: string = 'hasPart';\r\n  public static readonly IS_A: string = 'isA';\r\n  public static readonly IS_ALL_OF: string = 'isAllOf';\r\n  public static readonly IS_ANY_OF: string = 'isAnyOf';\r\n  public static readonly IS_NONE_OF: string = 'isNoneOf';\r\n\r\n  public value: string;\r\n  constructor(value: string) {\r\n    super();\r\n    this.value = value;\r\n  }\r\n\r\n  public async verify(): Promise<boolean> {\r\n    const isValid = Object.values(Operator).includes(this.value);\r\n    if (!isValid) {\r\n      throw new Error(`Operator not valid: '${this.value}'`);\r\n    }\r\n    return isValid;\r\n  }\r\n}\r\n","import { PolicyValidator } from '../PolicyValidator';\r\n\r\nexport class RightOperand extends PolicyValidator {\r\n  public value: string | number;\r\n\r\n  constructor(value: string | number) {\r\n    super();\r\n    this.value = value;\r\n  }\r\n\r\n  public async verify(): Promise<boolean> {\r\n    //\r\n    return true;\r\n  }\r\n}\r\n","import { PolicyValidator } from '../PolicyValidator';\r\n\r\nexport class LeftOperand extends PolicyValidator {\r\n  private value: string;\r\n\r\n  constructor(value: string) {\r\n    super();\r\n    this.value = value;\r\n  }\r\n\r\n  public getValue(): string {\r\n    return this.value;\r\n  }\r\n\r\n  public async visit(): Promise<string | number | null> {\r\n    // tmp testing purpose\r\n    if (this.value === 'age') {\r\n      return 21;\r\n    }\r\n    return null;\r\n  }\r\n\r\n  public async verify(): Promise<boolean> {\r\n    return true;\r\n  }\r\n}\r\n","import { PolicyValidator } from '../PolicyValidator';\r\nimport { LeftOperand } from './LeftOperand';\r\nimport { LogicalConstraint } from './LogicalConstraint';\r\nimport { Operator } from './Operator';\r\nimport { RightOperand } from './RightOperand';\r\n\r\nexport abstract class Constraint extends PolicyValidator {\r\n  public uid?: string;\r\n  public dataType?: string;\r\n  public unit?: string;\r\n  public status?: number;\r\n  public operator: Operator | null;\r\n  public leftOperand: LeftOperand | null;\r\n  public rightOperand: RightOperand | null;\r\n  private rightOperandReference?: null | string | string[];\r\n  private logicalConstraints?: null | LogicalConstraint[];\r\n  constructor(\r\n    leftOperand: LeftOperand | null,\r\n    operator: Operator | null,\r\n    rightOperand: RightOperand | null,\r\n  ) {\r\n    super();\r\n    this.leftOperand = leftOperand;\r\n    this.operator = operator;\r\n    this.rightOperand = rightOperand;\r\n  }\r\n\r\n  async visit(): Promise<boolean> {\r\n    return false;\r\n  }\r\n\r\n  protected async verify(): Promise<boolean> {\r\n    try {\r\n      const isValid =\r\n        (this.uid === undefined || typeof this.uid === 'string') &&\r\n        (this.dataType === undefined || typeof this.dataType === 'string') &&\r\n        (this.unit === undefined || typeof this.unit === 'string') &&\r\n        (this.status === undefined || typeof this.status === 'number');\r\n      if (!isValid) {\r\n        throw new Error('Some of your constraint properties are invalid');\r\n      }\r\n      return isValid;\r\n    } catch (error: any) {\r\n      throw error.message;\r\n    }\r\n  }\r\n}\r\n","import { Operator } from './Operator';\r\nimport { RightOperand } from './RightOperand';\r\nimport { LeftOperand } from './LeftOperand';\r\nimport { Constraint } from './Constraint';\r\n\r\nexport class AtomicConstraint extends Constraint {\r\n  constructor(\r\n    leftOperand: LeftOperand,\r\n    operator: Operator,\r\n    rightOperand: RightOperand,\r\n  ) {\r\n    super(leftOperand, operator, rightOperand);\r\n  }\r\n\r\n  async visit(): Promise<boolean> {\r\n    if (this.leftOperand && this.rightOperand) {\r\n      const leftValue: unknown = await this.leftOperand.visit();\r\n      switch (this.operator?.value) {\r\n        case Operator.EQ:\r\n          return leftValue === this.rightOperand;\r\n        case Operator.GT:\r\n          return (leftValue as number) > (this.rightOperand.value as number);\r\n        case Operator.LT:\r\n          return (leftValue as number) < (this.rightOperand.value as number);\r\n      }\r\n    }\r\n    return false;\r\n  }\r\n\r\n  public async verify(): Promise<boolean> {\r\n    const isValid =\r\n      (await super.verify()) &&\r\n      this.leftOperand instanceof LeftOperand &&\r\n      this.operator instanceof Operator &&\r\n      this.rightOperand instanceof RightOperand;\r\n    if (!isValid) {\r\n      throw new Error('AtomicConstraint propertie invalid');\r\n    }\r\n    return isValid;\r\n  }\r\n}\r\n","import { Constraint } from './Constraint';\r\nimport { Operator } from './Operator';\r\n\r\nexport class LogicalConstraint extends Constraint {\r\n  static readonly operands: string[] = ['and', 'andSequence', 'or', 'xone'];\r\n  private constraint: Constraint[];\r\n  private operand?: string;\r\n  constructor(operand: string) {\r\n    super(null, null, null);\r\n    this.operand = operand;\r\n    this.constraint = [];\r\n  }\r\n  public addConstraint(constraint: Constraint) {\r\n    this.constraint.push(constraint);\r\n  }\r\n  // Todo\r\n  async visit(): Promise<boolean> {\r\n    switch (this.operand) {\r\n      case 'and':\r\n        return (\r\n          await Promise.all(\r\n            this.constraint.map((constraint) => constraint.visit()),\r\n          )\r\n        ).every((result) => result);\r\n      case 'or':\r\n        return (\r\n          await Promise.all(\r\n            this.constraint.map((constraint) => constraint.visit()),\r\n          )\r\n        ).some((result) => result);\r\n      default:\r\n        return false;\r\n    }\r\n  }\r\n\r\n  public async verify(): Promise<boolean> {\r\n    const isValid =\r\n      (await super.verify()) &&\r\n      this.operand &&\r\n      LogicalConstraint.operands.includes(this.operand);\r\n    if (!isValid) {\r\n      throw new Error(`LogicalConstraint propertie invalid '${this.operand}'`);\r\n    }\r\n    return isValid;\r\n  }\r\n}\r\n","import { PolicyValidator } from './PolicyValidator';\r\n\r\nexport abstract class PolicyExplorer extends PolicyValidator {\r\n  protected abstract visit(): Promise<boolean>;\r\n\r\n  protected explore(depth: number = 0, evaluators: Promise<boolean>[]): void {\r\n    evaluators.push(this.visit());\r\n    for (const prop in this) {\r\n      if (this.hasOwnProperty(prop)) {\r\n        const value = (this as any)[prop];\r\n        if (Array.isArray(value)) {\r\n          for (const item of value) {\r\n            if (\r\n              item instanceof PolicyExplorer &&\r\n              typeof item.explore === 'function'\r\n            ) {\r\n              item.explore(depth + 2, evaluators);\r\n            }\r\n          }\r\n        } else if (\r\n          value instanceof PolicyExplorer &&\r\n          typeof value.explore === 'function'\r\n        ) {\r\n          value.explore(depth + 1, evaluators);\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n","import { PolicyExplorer } from '../PolicyExplorer';\r\nimport { ConflictTerm } from './ConflictTerm';\r\nimport { RuleDuty } from './RuleDuty';\r\nimport { RulePermission } from './RulePermission';\r\nimport { RuleProhibition } from './RuleProhibition';\r\n\r\nexport abstract class Policy extends PolicyExplorer {\r\n  protected '@context': string = '';\r\n  protected '@type': string;\r\n  protected uid: string;\r\n  protected permission: RulePermission[];\r\n  protected prohibition: RuleProhibition[];\r\n  protected obligation: RuleDuty[];\r\n  protected profile?: string[];\r\n  protected inheritFrom?: string[];\r\n  protected conflict?: ConflictTerm[];\r\n\r\n  constructor(uid: string, context: string, type: string) {\r\n    super();\r\n    this['@type'] = type;\r\n    this['@context'] = context;\r\n    this.uid = uid;\r\n    this.permission = [];\r\n    this.prohibition = [];\r\n    this.obligation = [];\r\n  }\r\n\r\n  public get permissions(): RulePermission[] {\r\n    return this.permission;\r\n  }\r\n  public get prohibitions(): RuleProhibition[] {\r\n    return this.prohibition;\r\n  }\r\n  public get obligations(): RulePermission[] {\r\n    return this.permission;\r\n  }\r\n  public addPermission(permission: RulePermission): void {\r\n    this.permission.push(permission);\r\n  }\r\n  public addProhibition(prohibition: RuleProhibition): void {\r\n    this.prohibition.push(prohibition);\r\n  }\r\n  public addDuty(prohibition: RuleDuty): void {\r\n    this.obligation.push(prohibition);\r\n  }\r\n  public async launchValidation(): Promise<boolean> {\r\n    const validations: Promise<boolean>[] = [];\r\n    this.validate(0, validations);\r\n    return Promise.all(validations).then((results) =>\r\n      results.every((result) => result),\r\n    );\r\n  }\r\n}\r\n","import { Party } from './Party';\r\nimport { RulePermission } from './RulePermission';\r\nimport { Policy } from './Policy';\r\n\r\nexport class PolicyAgreement extends Policy {\r\n  '@type': 'Agreement' = 'Agreement';\r\n  permission: RulePermission[] = [];\r\n  assigner: Party | null = null;\r\n  assignee: Party | null = null;\r\n\r\n  constructor(uid: string, context: string) {\r\n    super(uid, context, 'Agreement');\r\n  }\r\n\r\n  public async visit(): Promise<boolean> {\r\n    return false;\r\n  }\r\n\r\n  public async verify(): Promise<boolean> {\r\n    return true;\r\n  }\r\n}\r\n","import { Party } from './Party';\r\nimport { RulePermission } from './RulePermission';\r\nimport { Policy } from './Policy';\r\n\r\nexport class PolicyOffer extends Policy {\r\n  '@type': 'Offer' = 'Offer';\r\n  permission: RulePermission[] = [];\r\n  assigner: Party | null = null;\r\n  assignee: Party | null = null;\r\n\r\n  constructor(uid: string, context: string) {\r\n    super(uid, context, 'Offer');\r\n  }\r\n\r\n  public async visit(): Promise<boolean> {\r\n    return false;\r\n  }\r\n\r\n  public async verify(): Promise<boolean> {\r\n    return true;\r\n  }\r\n}\r\n","import { RulePermission } from './RulePermission';\r\nimport { Policy } from './Policy';\r\n\r\nexport class PolicySet extends Policy {\r\n  '@type': 'Set' = 'Set';\r\n  permission: RulePermission[] = [];\r\n\r\n  constructor(uid: string, context: string) {\r\n    super(uid, context, 'Set');\r\n  }\r\n\r\n  public async visit(): Promise<boolean> {\r\n    return false;\r\n  }\r\n\r\n  public async verify(): Promise<boolean> {\r\n    return true;\r\n  }\r\n}\r\n","import { PolicyExplorer } from '../PolicyExplorer';\r\nimport { Action } from './Action';\r\nimport { Asset } from './Asset';\r\nimport { Constraint } from './Constraint';\r\nimport { Party } from './Party';\r\nimport { Relation } from './Relation';\r\n\r\nexport abstract class Rule extends PolicyExplorer {\r\n  action?: Action | Action[];\r\n  target?: Asset;\r\n  assigner?: Party;\r\n  assignee?: Party;\r\n  asset?: Asset;\r\n  parties?: Party[];\r\n  failures?: Rule[];\r\n  protected constraint?: Constraint[];\r\n  uid?: string;\r\n  relation?: Relation;\r\n\r\n  constructor(uid?: string) {\r\n    super();\r\n    if (uid) {\r\n      this.uid = uid;\r\n    }\r\n  }\r\n\r\n  public get constraints(): Constraint[] {\r\n    if (this.constraint === undefined) {\r\n      this.constraint = [];\r\n    }\r\n    return this.constraint;\r\n  }\r\n  public setTarget(asset: Asset): void {\r\n    this.target = asset;\r\n  }\r\n  public setAction(action: Action): void {\r\n    this.action = action;\r\n  }\r\n  public addAction(action: Action): void {\r\n    if (this.action === undefined) {\r\n      this.action = [];\r\n    }\r\n    (this.action as Array<Action>).push(action);\r\n  }\r\n  public addConstraint(constraint: Constraint) {\r\n    this.constraints.push(constraint);\r\n  }\r\n  public getTarget(): Asset | undefined {\r\n    return this.target;\r\n  }\r\n  public getAction(): Action | undefined | Action[] {\r\n    return this.action;\r\n  }\r\n  public getConstraints(): Constraint[] {\r\n    return this.constraints;\r\n  }\r\n\r\n  protected async visit(): Promise<boolean> {\r\n    try {\r\n      if (this.constraints) {\r\n        await Promise.all(\r\n          this.constraints.map((constraint) => constraint.visit()),\r\n        );\r\n      }\r\n      return true;\r\n    } catch (error) {\r\n      console.error('Error while evaluating rule:', error);\r\n      return false;\r\n    }\r\n  }\r\n}\r\n","import { Party } from './Party';\r\nimport { Rule } from './Rule';\r\n\r\nexport class RuleDuty extends Rule {\r\n  private consequence?: RuleDuty[];\r\n  public compensatedParty?: string;\r\n  public compensatingParty?: string;\r\n  constructor(assigner?: Party, assignee?: Party) {\r\n    super();\r\n    if (assigner) {\r\n      this.assigner = assigner;\r\n    }\r\n    if (assignee) {\r\n      this.assignee = assignee;\r\n    }\r\n  }\r\n\r\n  public async visit(): Promise<boolean> {\r\n    return false;\r\n  }\r\n\r\n  public async verify(): Promise<boolean> {\r\n    return true;\r\n  }\r\n\r\n  public addConsequence(consequence: RuleDuty) {\r\n    if (this.consequence === undefined) {\r\n      this.consequence = [];\r\n    }\r\n    this.consequence.push(consequence);\r\n  }\r\n}\r\n","import { Rule } from './Rule';\r\nimport { RuleDuty } from './RuleDuty';\r\n\r\nexport class RulePermission extends Rule {\r\n  duty?: RuleDuty[];\r\n  constructor() {\r\n    super();\r\n  }\r\n\r\n  public addDuty(duty: RuleDuty) {\r\n    if (this.duty === undefined) {\r\n      this.duty = [];\r\n    }\r\n    this.duty.push(duty);\r\n  }\r\n\r\n  public async visit(): Promise<boolean> {\r\n    return false;\r\n  }\r\n\r\n  public async verify(): Promise<boolean> {\r\n    return true;\r\n  }\r\n}\r\n","import { Rule } from './Rule';\r\nimport { RuleDuty } from './RuleDuty';\r\n\r\nexport class RuleProhibition extends Rule {\r\n  remedy?: RuleDuty[];\r\n  constructor() {\r\n    super();\r\n  }\r\n\r\n  public async visit(): Promise<boolean> {\r\n    return false;\r\n  }\r\n\r\n  public async verify(): Promise<boolean> {\r\n    return true;\r\n  }\r\n}\r\n","export enum CopyMode {\r\n  all = 0,\r\n  exclude = 1,\r\n  include = 2,\r\n}\r\nexport const copy = (\r\n  instance: Record<string, any> | null | undefined,\r\n  element: Record<string, any>,\r\n  attributes: string[] = [],\r\n  mode: CopyMode = 0,\r\n): void => {\r\n  if (instance) {\r\n    let keys = Object.keys(element);\r\n    if (mode !== CopyMode.all) {\r\n      keys = keys.filter((key) => {\r\n        const included = attributes.includes(key);\r\n        return mode === CopyMode.exclude ? !included : included;\r\n      });\r\n    }\r\n    keys.forEach((key: string) => {\r\n      if (typeof instance[key] !== 'function') {\r\n        instance[key] = element[key];\r\n      }\r\n    });\r\n  }\r\n};\r\n","import { Action } from './models/Action';\r\nimport { Asset } from './models/Asset';\r\nimport { AtomicConstraint } from './models/AtomicConstraint';\r\nimport { Constraint } from './models/Constraint';\r\nimport { LeftOperand } from './models/LeftOperand';\r\nimport { LogicalConstraint } from './models/LogicalConstraint';\r\nimport { Operator } from './models/Operator';\r\nimport { Policy } from './models/Policy';\r\nimport { PolicyAgreement } from './models/PolicyAgreement';\r\nimport { PolicyOffer } from './models/PolicyOffer';\r\nimport { PolicySet } from './models/PolicySet';\r\nimport { RightOperand } from './models/RightOperand';\r\nimport { Rule } from './models/Rule';\r\nimport { RuleDuty } from './models/RuleDuty';\r\nimport { RulePermission } from './models/RulePermission';\r\nimport { RuleProhibition } from './models/RuleProhibition';\r\nimport { CopyMode, copy } from './utils';\r\n\r\ntype InstanciatorFunction = (node: any, parent: any) => any;\r\n\r\nexport class PolicyInstanciator {\r\n  public policy: Policy | null;\r\n  public static instance: PolicyInstanciator;\r\n\r\n  constructor() {\r\n    this.policy = null;\r\n  }\r\n\r\n  public static getInstance(): PolicyInstanciator {\r\n    if (!PolicyInstanciator.instance) {\r\n      PolicyInstanciator.instance = new PolicyInstanciator();\r\n    }\r\n    return PolicyInstanciator.instance;\r\n  }\r\n\r\n  private static readonly instanciators: Record<string, InstanciatorFunction> =\r\n    {\r\n      permission: PolicyInstanciator.permission,\r\n      prohibition: PolicyInstanciator.prohibition,\r\n      obligation: PolicyInstanciator.obligation,\r\n      duty: PolicyInstanciator.duty,\r\n      action: PolicyInstanciator.action,\r\n      target: PolicyInstanciator.target,\r\n      constraint: PolicyInstanciator.constraint,\r\n      refinement: PolicyInstanciator.refinement,\r\n      consequence: PolicyInstanciator.consequence,\r\n    };\r\n\r\n  private static permission(element: any, parent: Policy): RulePermission {\r\n    const rule = new RulePermission();\r\n    parent.addPermission(rule);\r\n    return rule;\r\n  }\r\n\r\n  private static prohibition(element: any, parent: Policy): RuleProhibition {\r\n    const rule = new RuleProhibition();\r\n    parent.addProhibition(rule);\r\n    return rule;\r\n  }\r\n\r\n  private static obligation(element: any, parent: Policy): RuleDuty {\r\n    const { assigner, assignee } = element;\r\n    const rule = new RuleDuty(assigner, assignee);\r\n    parent.addDuty(rule);\r\n    return rule;\r\n  }\r\n\r\n  private static duty(element: any, parent: RulePermission) {\r\n    const { assigner, assignee } = element;\r\n    const rule = new RuleDuty(assigner, assignee);\r\n    parent.addDuty(rule);\r\n    return rule;\r\n  }\r\n\r\n  private static action(element: string | any, parent: Rule): Action {\r\n    if (typeof element === 'object') {\r\n      const action = new Action(element.value, null);\r\n      parent.addAction(action);\r\n      return action;\r\n    }\r\n    const action = new Action(element, null);\r\n    parent.setAction(action);\r\n    return action;\r\n  }\r\n\r\n  private static target(element: any, parent: Rule): void {\r\n    const asset = new Asset(element);\r\n    parent.setTarget(asset);\r\n  }\r\n\r\n  private static constraint(\r\n    element: any,\r\n    parent: LogicalConstraint | Rule | Action,\r\n  ): Constraint {\r\n    const {\r\n      leftOperand,\r\n      operator,\r\n      rightOperand,\r\n      constraint: constraints,\r\n    } = element;\r\n    const constraint: Constraint =\r\n      (leftOperand &&\r\n        operator &&\r\n        rightOperand !== undefined &&\r\n        new AtomicConstraint(\r\n          new LeftOperand(leftOperand),\r\n          new Operator(operator),\r\n          new RightOperand(rightOperand),\r\n        )) ||\r\n      (operator &&\r\n        Array.isArray(constraints) &&\r\n        constraints.length > 0 &&\r\n        new LogicalConstraint(operator));\r\n    copy(\r\n      constraint,\r\n      element,\r\n      ['constraint', 'leftOperand', 'operator', 'rightOperand'],\r\n      CopyMode.exclude,\r\n    );\r\n    parent.addConstraint(constraint || element);\r\n    return constraint;\r\n  }\r\n\r\n  private static refinement(element: any, parent: Action): Constraint {\r\n    return PolicyInstanciator.constraint(element, parent);\r\n  }\r\n\r\n  private static consequence(element: any, parent: RuleDuty): RuleDuty {\r\n    const { assigner, assignee } = element;\r\n    const rule = new RuleDuty(assigner, assignee);\r\n    copy(\r\n      rule,\r\n      element,\r\n      ['compensatedParty', 'compensatingParty'],\r\n      CopyMode.include,\r\n    );\r\n    parent.addConsequence(rule);\r\n    return rule;\r\n  }\r\n\r\n  private selectPolicyType(json: any): void {\r\n    const context = json['@context'];\r\n    switch (json['@type']) {\r\n      case 'Offer':\r\n        this.policy = new PolicyOffer(json.uid, context);\r\n        break;\r\n      case 'Set':\r\n        this.policy = new PolicySet(json.uid, context);\r\n        break;\r\n      case 'Agreement':\r\n        this.policy = new PolicyAgreement(json.uid, context);\r\n        break;\r\n      default:\r\n        throw new Error(`Unknown policy type: ${json['@type']}`);\r\n    }\r\n  }\r\n\r\n  public genPolicyFrom(json: any): Policy | null {\r\n    this.selectPolicyType(json);\r\n    this.traverse(json, this.policy);\r\n    return this.policy;\r\n  }\r\n\r\n  public traverse(node: any, parent: any): void {\r\n    const instanciate = (property: string, element: any) => {\r\n      try {\r\n        if (element) {\r\n          const child: any =\r\n            PolicyInstanciator.instanciators[property] &&\r\n            PolicyInstanciator.instanciators[property](element, parent);\r\n          if (typeof element === 'object') {\r\n            if (child) {\r\n              this.traverse(element, child);\r\n            } else {\r\n              console.warn(`Traversal stopped for \"${property}\".`);\r\n            }\r\n          }\r\n        }\r\n      } catch (error: any) {\r\n        console.error(error.message);\r\n      }\r\n    };\r\n    for (const property in node) {\r\n      const element = node[property];\r\n      if (Array.isArray(element)) {\r\n        element.forEach((item: any) => {\r\n          instanciate(property, item);\r\n        });\r\n      } else {\r\n        instanciate(property, element);\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nexport default PolicyInstanciator.getInstance();\r\n"],"mappings":"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","names":["action"]}